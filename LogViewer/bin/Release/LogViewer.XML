<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogViewer</name>
    </assembly>
    <members>
        <member name="T:LogViewer.View.KeywordCountSettingView">
            <summary>
            Interaction logic for RegisterSearchWindow.xaml
            </summary>
            <summary>
            KeywordCountSettingView
            </summary>
        </member>
        <member name="M:LogViewer.View.KeywordCountSettingView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.MoveToLine">
            <summary>
            Interaction logic for MoveToLine.xaml
            </summary>
            <summary>
            MoveToLine
            </summary>
        </member>
        <member name="M:LogViewer.View.MoveToLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.DateTimePicker">
            <summary>
            Interaction logic for DateTimePicker.xaml
            </summary>
            <summary>
            DateTimePicker
            </summary>
        </member>
        <member name="M:LogViewer.View.DateTimePicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.Model.ErrorActionItem">
            <summary>
            Model class for storing information of error action item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ErrorActionItem.ErrorLv">
            <summary>
            Get or set error level
            </summary>
        </member>
        <member name="P:LogViewer.Model.ErrorActionItem.ErrorCode">
            <summary>
            Get or set error code
            </summary>
        </member>
        <member name="P:LogViewer.Model.ErrorActionItem.ErrorMessage">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="P:LogViewer.Model.ErrorActionItem.ErrorRecipe">
            <summary>
            Get or set error recipe
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditCCSFilterSettingViewModel">
            <summary>
            Class provide method for setting filtering parameter item
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditFilterSettingViewModel">
            <summary>
            Class provides methods for editing filter setting item
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseEditSettingViewModel`1">
            <summary>
            Base abstract class provides common method for setting parameter item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LogViewer.ViewModel.BaseApplyWindowViewModel`1">
            <summary>
            Class for base window of application
            </summary>
            /// <typeparam name="T">The type of window ViewModel.
            </typeparam>
        </member>
        <member name="T:LogViewer.ViewModel.BaseViewModel">
            <summary> 
            Provides common functionality for ViewModel classes 
            </summary> 
        </member>
        <member name="M:LogViewer.ViewModel.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="E:LogViewer.ViewModel.BaseViewModel.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>
        </member>
        <member name="T:LogViewer.Service.IClosableDialog">
            <summary>
            Interface provides overwrite method for handling on closing of a dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.#cctor">
            <summary>
            Initializes a new instances of the BaseWindowViewModel class.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.ShowDialog(System.Object)">
            <summary>
            Function Show a dialog window when open it, cannot use parent window,
            override it to determine the value on-demand.
            </summary>
            <param name="ownerWindowVM">Parent window that window need show</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.Show(System.Object)">
            <summary>
            Function Show a window when open it, can use parent window,
            override it to determine the value on-demand.
            </summary>
            <param name="ownerWindowVM">Parent window that window need show</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.CloseDialog">
            <summary>
            Function CloseDialog call Action close defined by each window,
            override it to determine the value on-demand.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.dialog_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Trigger when closing window,
            override it to determine the value on-demand.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseWindowViewModel._closeCommand">
            <summary>
            Get or set Command of button Cancel or Close
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowViewModel.CloseCommandCL">
            <summary>
            Function callback when click button Cancel or Close,
            override it to determine the value on-demand.
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseWindowViewModel.IsShow">
            <summary>
            Returns the status of window is show or not show.
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseWindowViewModel.IsCCS">
            <summary>
            Returns the status of window is type CCS or CXDI.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseApplyWindowViewModel`1.SetApplyEvent(System.Action{`0})">
            <summary>
            Initializes OnApplyEvent.
            </summary>
            /// <param name="onApplyEvent">Action subscribing to the apply event.</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseApplyWindowViewModel`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instances of the BaseApplyWindowViewModel class.
            </summary>
            <param name="onApplyEvent">Action subscribing to the apply event.</param>
        </member>
        <member name="F:LogViewer.ViewModel.BaseApplyWindowViewModel`1._applyCommand">
            <summary>
            Get or set Command of button Apply
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseApplyWindowViewModel`1.ApplyCL">
            <summary>
            Function callback when click button apply
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseApplyWindowViewModel`1._okCommand">
            <summary>
            Get or set Command of button OK
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseApplyWindowViewModel`1.OkCL">
            <summary>
            Function callback when click button OK
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseApplyWindowViewModel`1.GetDataToApply">
            <summary>
            Get data type to apply
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.BaseApplyWindowViewModel`1.OnApplyEvent">
            <summary>
            Action of button apply in window.
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseApplyWindowViewModel`1.CanApply">
            <summary>
            Check can execute button apply and OK
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.BaseEditSettingViewModel`1.#ctor(System.Action{System.Collections.Generic.List{`0}})" -->
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.Initialize">
            <summary>
            Initialize after creating object
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.AddItemSettingCL">
            <summary>
            Command for adding item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.DeleteItemSettingCL">
            <summary>
            Command for deleting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.DeleteItemSetting(System.Collections.Generic.IList{System.Object})">
            <summary>
            Command for deleting item
            </summary>
            <param name="itemsToDelete">List of item for deleting</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.CreateNewAndSetCandidateDefaultValue">
            <summary>
            Create new item and set default value
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.GetDataToApply">
            <summary>
            Get data to apply
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseEditSettingViewModel`1.LoadData(System.Collections.Generic.IList{`0})">
            <summary>
            Load data
            </summary>
            <param name="data">List of item</param>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.IsValidAllInputProp">
            <summary>
            Get valid status of all item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.SelectedItems">
            <summary>
            Get or set for list of items as selected
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.ItemSettingList">
            <summary>
            Get or set item setting list
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.Title">
            <summary>
            Get or set title
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.AddItemSettingCommand">
            <summary>
            Command interface for adding item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseEditSettingViewModel`1.DeleteItemSettingCommand">
            <summary>
            Command inteface for deleting item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditFilterSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.Initialize">
            <summary>
            Initialize after creating object
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.EditForeGroundCL">
            <summary>
            Command for editing ground
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.EditBackGroundCL">
            <summary>
            Command for editing background
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.EditFontStyleCL">
            <summary>
            Command for editing font style
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.OverwriteItemSettingCL">
            <summary>
            Command for overwriting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default log item
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.GetColorStringFromColorPicker(System.String)">
            <summary>
            Get color string from color picker
            </summary>
            <param name="hex">Hexa color string</param>
            <returns>Valid hexa string for displaying</returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.CreateNewAndSetCandidateDefaultValue">
            <summary>
            Create new filter item record and set default value
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.OnCandidateValueChange">
            <summary>
            Process for changing value
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.ApplyCL">
            <summary>
            Apply filter setting item list
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.DeleteItemSetting(System.Collections.Generic.IList{System.Object})">
            <summary>
            Delete filter item setting
            </summary>
            <param name="itemsToDelete"></param>
        </member>
        <member name="M:LogViewer.ViewModel.EditFilterSettingViewModel.AddItemSettingCL">
            <summary>
            Add new item setting
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.IsValidAllInputPropOverwrite">
            <summary>
            Get valid status of all item 
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.FilterString">
            <summary>
            Get or set string value for filtering
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.Foreground">
            <summary>
            Get or set foreground color
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.Background">
            <summary>
            Get or set background color
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.FontStyle">
            <summary>
            Get or set font style
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.LogItem">
            <summary>
            Get or set column name of log record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.AllLogItems">
            <summary>
            Get all system log items
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.DoubleClickedCandidate">
            <summary>
            Get or set item when user double click on
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.EditForeGroundCommand">
            <summary>
            Command interface for editing foreground
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.EditBackGroundCommand">
            <summary>
            Command interface for editing background
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.EditFontStyleCommand">
            <summary>
            Command interface for editing font style
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditFilterSettingViewModel.OverwriteItemSettingCommand">
            <summary>
            Command interface for overwriting item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditCCSFilterSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditCCSFilterSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default log  item
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.EditCCSFilterSettingViewModel.AllLogItems">
            <summary>
            Get all log item
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.IsUlongRule">
            <summary>
            Class provide method for validation is Ulong number
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.IsUlongRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="value">Object to validate</param>
            <param name="cultureInfo"><see cref="T:System.Globalization.CultureInfo"/></param>
            <returns><see cref="T:System.Windows.Controls.ValidationResult"/></returns>
        </member>
        <member name="P:LogViewer.MVVMHelper.IsUlongRule.Message">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.EnumToBooleanConverter">
            <summary>
            Class convert Enum to boolean
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return a boolean value</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return Binding Enum/></returns>
        </member>
        <member name="T:LogViewer.Business.GraphParamResultItem">
            <summary>
            Class provides method for processing graph parameter result item
            </summary>
        </member>
        <member name="M:LogViewer.Business.GraphParamResultItem.Clone">
            <summary>
            Clone to new object
            </summary>
            <returns><see cref="T:LogViewer.Business.GraphParamResultItem"/></returns>
        </member>
        <member name="P:LogViewer.Business.GraphParamResultItem.Time">
            <summary>
            Get or set date time
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphParamResultItem.Value">
            <summary>
            Get or set value of result item
            </summary>
        </member>
        <member name="T:LogViewer.Model.FilterItemProxy">
            <summary>
            Model class for creating proxy of <see cref="T:LogViewer.Business.FilterItemSetting"/>, this class provide methods or initialize data for speed up
            filter process.
            </summary>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.IsMatch(System.String)">
            <summary>
            Check for a given string <paramref name="searchString"/> is match or not with current filter item
            </summary>
            <param name="searchString">string for search</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.BuildSearchMethod(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initialize be for do <see cref="M:LogViewer.Model.FilterItemProxy.IsMatch(System.String)"/>
            </summary>
            <param name="regexOption"></param>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.#ctor">
            <summary>
            Default constructor will initialize for <see cref="P:LogViewer.Model.FilterItemProxy.FilterItemSettingObj"/>
            </summary>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.#ctor(LogViewer.Business.FilterItemSetting)">
            <summary>
            Default constructor will preference to <see cref="P:LogViewer.Model.FilterItemProxy.FilterItemSettingObj"/>
            </summary>
            <param name="searchItem"><see cref="T:LogViewer.Business.FilterItemSetting"/></param>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.#ctor(LogViewer.Model.SearchItem)">
            <summary>
            Default constructor will preference to <see cref="P:LogViewer.Model.FilterItemProxy.FilterItemSettingObj"/>
            </summary>
            <param name="searchItem"><see cref="T:LogViewer.Business.FilterItemSetting"/></param>
        </member>
        <member name="M:LogViewer.Model.FilterItemProxy.#ctor(LogViewer.Model.ILogItemSearch)">
            <summary>
            Default constructor will preference to <see cref="P:LogViewer.Model.FilterItemProxy.FilterItemSettingObj"/>
            </summary>
            <param name="searchItem"><see cref="T:LogViewer.Business.FilterItemSetting"/></param>
        </member>
        <member name="P:LogViewer.Model.FilterItemProxy.FilterItemSettingObj">
            <summary>
            Get or set <see cref="T:LogViewer.Business.FilterItemSetting"/>
            </summary>
        </member>
        <member name="T:LogViewer.View.EditFilterSettingView">
            <summary>
            Interaction logic for RegisterFilterWindow.xaml
            </summary>
            <summary>
            EditFilterSettingView
            </summary>
        </member>
        <member name="M:LogViewer.View.EditFilterSettingView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.MessageBoxExportViewModel">
            <summary>
            ViewModel of message box export to image, CSV, memo log
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MessageBoxExportViewModel.#ctor">
            <summary>
            Initializes a new instance of the MessageBoxExportViewModel class.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MessageBoxExportViewModel._okCommand">
            <summary>
            Get or set Command of button OK.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MessageBoxExportViewModel.OkCommandCL">
            <summary>
            unction callback when click button OK
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.MessageBoxExportViewModel.OnOkEvent">
            <summary>
            Action of event when click button OK
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxExportViewModel.Directory">
            <summary>
            Get and set Directory
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxExportViewModel.FileName">
            <summary>
            Get and set FileName
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxExportViewModel.Extension">
            <summary>
            Get and set Extension
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxExportViewModel.Caption">
            <summary>
            Get and set Caption
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseFileFolderManagerViewModel">
            <summary>
            Base class provides common methods for File folder manager
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseWindowStandardDialogViewModel">
            <summary>
            Base class provides common method for open new dialog 
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseWindowStandardDialogViewModel._dialogService">
            <summary>
            Dialog service
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseWindowStandardDialogViewModel.#cctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseFileFolderManagerViewModel.ShowDialog(System.Object)">
            <summary>
            Show dialog
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>OK or Cancel</returns>
        </member>
        <member name="T:LogViewer.ViewModel.CCSResultSearchKeywordViewModel">
            <summary>
            class provides method for search CCS keyword.
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1">
            <summary>
            Base class provides common methods for search keyword.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.#ctor">
            <summary>
            Default Constructor  
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.InitLogItemList">
            <summary>
            Abstract function Initialize log item list
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.GetDefaultSelectedLogItem">
            <summary>
            Abstract function get default selectedLogItem
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.IsValidLogField(System.String)">
            <summary>
            Abstract function check log valid
            </summary>
            <param name="value">Value to check</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.LoadData(System.Collections.Generic.IList{`0})">
            <summary>
            Load data to LogResultList
            </summary>
            <param name="data"></param>
        </member>
        <member name="E:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.OnShowRecordEvent">
            <summary>
            Action show record event
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.DoubleClickedRecord">
            <summary>
            Set double clicked record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.IsCCS">
            <summary>
            Check is CCS log
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.IsCXDI">
            <summary>
            Check is CXDI log
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.IsShowTab">
            <summary>
            Get or set IsShowTab
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.LogItemList">
            <summary>
            Get or set LogItemList
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.SelectedLogItem">
            <summary>
            Get or set SelectedLogItem
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.LogResultList">
            <summary>
            Get or set LogResultList
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseResultSearchKeywordViewModel`1.ResultCount">
            <summary>
            Get or set ResultCount
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.InitLogItemList">
            <summary>
            Initialize log item list
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.GetDefaultSelectedLogItem">
            <summary>
            Get default selected log item
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.IsValidLogField(System.String)">
            <summary>
            Check log field valid
            </summary>
            <param name="value">Value to check</param>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.IsCCS">
            <summary>
            Get IsCCS alway return true
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSResultSearchKeywordViewModel.IsCXDI">
            <summary>
            Get IsCXDI alway return false
            </summary>
        </member>
        <member name="T:LogViewer.Business.ILogParser`1">
            <summary>
            Interface must be extend for all log parser class
            </summary>
            <typeparam name="T">Type of log record: CCSLogRecord or CXDILogRecord</typeparam>
        </member>
        <member name="M:LogViewer.Business.ILogParser`1.ParserFromFile(System.String)">
            <summary>
            Extract log record from a file
            </summary>
            <param name="FilePath">Location of file</param>
            <returns>List of log record. Where T is type of log record: CCSLogRecord or CXDILogRecord class</returns>
        </member>
        <member name="M:LogViewer.Business.ILogParser`1.ParserFromFile(System.IO.StringReader)">
            <summary>
            Extract log record from a file
            </summary>
            <param name="reader">log content hold by StringReader object</param>
            <returns>List of log record. Where T is type of log record: CCSLogRecord or CXDILogRecord class</returns>
        </member>
        <member name="T:LogViewer.Business.ILogMemoParser`1">
            <summary>
            Inteface must be extent for all memo log parser class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.Business.ILogMemoParser`1.ParserFromFile(System.String)">
            <summary>
            Extract log record and memo from an XML file
            </summary>
            <param name="filePath">Location of the file</param>
            <returns>Object is type of MemoLog which is content all log record extracted and memo information (bookmarks, comments)</returns>
        </member>
        <member name="M:LogViewer.Business.ILogMemoParser`1.WriteMemoLogFile(System.String)">
            <summary>
            Export log record, bookmarks and comments to XML file.
            </summary>
            <param name="filePath">Location of file</param>
            <returns>True: when export successfully, otherwise is False</returns>
        </member>
        <member name="T:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel">
            <summary>
            Class provides method for Error action tab
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.StopErrorAction">
            <summary>
            Action stop analyze error action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.#ctor(System.Action{LogViewer.Model.CCSLogRecord},System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="onShowRecord">Action show record</param>
            <param name="stopErrorAction">Action stop analyze error action</param>
        </member>
        <member name="F:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel._isLoadingData">
            <summary>
            Get or set IsLoadingData
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel._isShowTabError">
            <summary>
            Get or set IsShowTabError
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.CancelErrorCL">
            <summary>
            Function callback when cancel error action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.ClearData">
            <summary>
            Clear data in error action tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.LoadData(System.Collections.Generic.IList{LogViewer.Model.AnalyzedErrorActionItem})">
            <summary>
            Load data to error action tab
            </summary>
            <param name="data">List error action result </param>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.IsEnableCopy">
            <summary>
            Check can execute copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.CopyCommandCL">
            <summary>
            Function callback when click copy menu item
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.OnShowRecord">
            <summary>
            Action show record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.DoubleClickedRecord">
            <summary>
            Set property double clicked record error action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.SelectedItems">
            <summary>
            Get or set SelectedItems
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.CancelError">
            <summary>
            Get or set cancel error action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.ErrorActionList">
            <summary>
            Get or set error action result list
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.ErrorActionTabViewModel.CopyCommand">
            <summary>
            Get or set command for copy menu item
            </summary>
        </member>
        <member name="T:LogViewer.Util.Utility">
            <summary>
            Class provides utility methods
            </summary>
        </member>
        <member name="M:LogViewer.Util.Utility.NVL(System.String)">
            <summary>
            Check for null value
            </summary>
            <param name="value">an input string</param>
            <returns>Empty string if input value is null, otherwise it return original string</returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.TranslateConverter">
            <summary>
            Class translate bundle from properties.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.TranslateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert key to string
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return string value of key</returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.DataGridDragDropEventArgs">
            <summary>
            Class Data Grid Drag Drop Event Args.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataGridDragDropEventArgs.Source">
            <summary>
            The value to match against the input value of Source.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataGridDragDropEventArgs.Effects">
            <summary>
            The value to match against the input value of Effects.
            </summary>
        </member>
        <member name="T:LogViewer.Business.GraphResult">
            <summary>
            Class provides methods for storing graph result
            </summary>
        </member>
        <member name="M:LogViewer.Business.GraphResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphResult.ParamSetting">
            <summary>
            Get or set graph parameter setting <see cref="T:LogViewer.Business.GraphParamSetting"/>
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphResult.ResultList">
            <summary>
            Get or set list of graph parameter result item <see cref="T:LogViewer.Business.GraphParamSetting"/>
            </summary>
        </member>
        <member name="T:LogViewer.Business.GraphRangeSetting">
            <summary>
            Class provides method for setting range of graph
            </summary>
        </member>
        <member name="T:LogViewer.Model.ICopyable`1">
            <summary>
            Interface provide method for clone object feature
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.Business.GraphRangeSetting.Copy">
            <summary>
            Clone to new object
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.From">
            <summary>
            Get or set "From" date.
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.To">
            <summary>
            Get or set "To" date
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.FirstYRangeFrom">
            <summary>
            Get or set the first "From" parameter for Y axis. 
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.FirstYRangeTo">
            <summary>
            Get or set the first "To" parameter for Y axis. 
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.SecondYRangeFrom">
            <summary>
            Get or set the second "From" parameter for Y axis. 
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphRangeSetting.SecondYRangeTo">
            <summary>
            Get or set the second "To" parameter for Y axis. 
            </summary>
        </member>
        <member name="T:LogViewer.Model.Counter">
            <summary>
            Model class for storing information of firmware <seealso cref="T:LogViewer.Model.CXDIFirmware"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.Counter.parameter">
            <summary>
            Get or set parameter
            </summary>
        </member>
        <member name="P:LogViewer.Model.Counter.value">
            <summary>
            Get or set value
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.LineSeriesProtobyteToDrawingConverter">
            <summary>
            Class register event of graph in CXDI log
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.LineSeriesProtobyteToDrawingConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Prototype to CreateGeometryDrawing
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>CreateGeometryDrawing value</returns>
        </member>
        <member name="T:LogViewer.Model.AnalyzedPatternResultItem`1">
            <summary>
            Model class for storing analyzed pattern
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.Model.AnalyzedPatternResultItem`1.#ctor">
            <summary>
            Default constructor. The constructor will initialize for <see cref="P:LogViewer.Model.AnalyzedPatternResultItem`1.FoundPattern"/> and <see cref="P:LogViewer.Model.AnalyzedPatternResultItem`1.RootKey"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.Count">
            <summary>
            Get number of keys found after analyze current pattern.
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.LogRecords">
            <summary>
            Get list of found log record.
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.RootKey">
            <summary>
            Get or set root key
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.FoundPattern">
            <summary>
            Get or set found pattern
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedPatternResultItem`1.PatternItem">
            <summary>
            Get or set <see cref="T:LogViewer.Business.PatternItemSetting"/>
            </summary>
        </member>
        <member name="T:LogViewer.WindowViewModelMapping.IWindowViewModelMappings">
            <summary>
            Interface describing the Window-ViewModel mappings used by the dialog service.
            </summary>
        </member>
        <member name="M:LogViewer.WindowViewModelMapping.IWindowViewModelMappings.GetWindowTypeFromViewModelType(System.Type)">
            <summary>
            Gets the window type based on registered ViewModel type.
            </summary>
            <param name="viewModelType">The type of the ViewModel.</param>
            <returns>The window type based on registered ViewModel type.</returns>
        </member>
        <member name="T:LogViewer.View.SetFontStyleDialog">
            <summary>
            Interaction logic for SettingFontStyle.xaml
            </summary>
            <summary>
            SetFontStyleDialog
            </summary>
        </member>
        <member name="M:LogViewer.View.SetFontStyleDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.PatternItemView">
            <summary>
            Interaction logic for RegisterPatternSetup.xaml
            </summary>
            <summary>
            PatternItemView
            </summary>
        </member>
        <member name="M:LogViewer.View.PatternItemView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.OpenFileDialogViewModel">
            <summary>
            Class provides method for open file dialog
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.OpenFile.IOpenFileDialog">
            <summary>
            Interface describing the OpenFileDialog.
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.IFileDialog">
            <summary>
            Interface describing the FileDialog.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.AddExtension">
            <summary>
            Gets or sets a value indicating whether the dialog box automatically adds an extension to a
            file name if the user omits the extension.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user
            specifies a file name that does not exist.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.CheckPathExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user
            specifies a path that does not exist.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.DefaultExt">
            <summary>
            Gets or sets the default file name extension.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.FileNames">
            <summary>
            Gets or sets the file names of all selected files in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines the choices that appear
            in the "Save as file type" or "Files of type" box in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.IFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.OpenFile.IOpenFileDialog.Multiselect">
            <summary>
            Gets or sets a value indicating whether the dialog box allows multiple files to be
            selected.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.OpenFileDialogViewModel.ShowDialog(System.Object)">
            <summary>
            Show dialog
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>OK or Cancel</returns>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.AddExtension">
            <summary>
            Add extension
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.CheckFileExists">
            <summary>
            Check file exists
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.CheckPathExists">
            <summary>
            Check path exists
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.DefaultExt">
            <summary>
            Default extension
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.FileNames">
            <summary>
            Array file name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.InitialDirectory">
            <summary>
            InitialDirectory
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.OpenFileDialogViewModel.Multiselect">
            <summary>
            Multi select
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel">
            <summary>
            class provides method for search CXDI keyword.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.InitLogItemList">
            <summary>
            Initialize log item list
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.GetDefaultSelectedLogItem">
            <summary>
            Get default selected log item
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.IsValidLogField(System.String)">
            <summary>
            Check log field valid
            </summary>
            <param name="value">Value to check</param>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.IsCCS">
            <summary>
            Get IsCCS alway return false
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIResultSearchKeywordViewModel.IsCXDI">
            <summary>
            Get IsCXDI alway return true
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.SwitchedContent">
            <summary>
            An element whose content changes depending on a set of conditions.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchedContent.#cctor">
            <summary>
            Initializes the <see cref="T:SwitchedContent"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchedContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwitchedContent"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchedContent.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call 
            <see cref="M:FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchedContent.UpdateBindings">
            <summary>
            Binds the ContentPresenter's Content property to the Binding set on this control.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchedContent.Binding">
            <summary>
            Gets or sets the binding for the content property.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchedContent.Cases">
            <summary>
            A collection of switch cases that determine the content used.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchedContent.Else">
            <summary>
            Gets or sets the value to use when none of the cases match.
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.JumpToTimeViewModel`1">
            <summary>
            Class presentation for jump to time window
            </summary>
            <typeparam name="T">T is CCSLogRecord or CXDILogRecord</typeparam>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listYear">
            <summary>
            Get or set Collection ListYear.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listMonth">
            <summary>
            Get or set Collection ListMonth.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listDay">
            <summary>
            Get or set Collection ListDay.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listHour">
            <summary>
            Get or set Collection ListHour.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listMinute">
            <summary>
            Get or set Collection ListMinute.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._listSecond">
            <summary>
            Get or set Collection ListSecond.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._year">
            <summary>
            Get or set property Year.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._month">
            <summary>
            Get or set property Month.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._day">
            <summary>
            Get or set property Hour.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._hour">
            <summary>
            Get or set property Year.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._minute">
            <summary>
            Get or set property Minute.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._second">
            <summary>
            Get or set property Second.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._miliSecond">
            <summary>
            Get or set property MiliSecond.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._message1">
            <summary>
            Get or set property Message1.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._message2">
            <summary>
            Get or set property Message2.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._from">
            <summary>
            Date-time begin in log. 
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._to">
            <summary>
            Date-time end in log
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.#ctor(System.Action{System.String,System.String},`0,`0)">
            <summary>
            Initializes a new instance of the jumpToTimeViewModel class.
            </summary>
            <param name="onShowRecordWithDateTimeEvent">Event when Click button jump to</param>
            <param name="firstLog">First record in log</param>
            <param name="lastLog">Last record in log</param>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.LoadYear(System.DateTime,System.DateTime)">
            <summary>
            Load year from date from and date to
            </summary>
            <param name="dtFrom">Date-time from</param>
            <param name="dtTo">Date-time to</param>
            <returns>List string have year</returns>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.LoadMonth(System.DateTime,System.DateTime)">
            <summary>
            Load month from date from and date to
            </summary>
            <param name="from">Date-time from</param>
            <param name="to">Date-time to</param>
            <returns>List string have month</returns>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.LoadDay(System.DateTime,System.DateTime)">
            <summary>
            Load day from date from and date to
            </summary>
            <param name="from">Date-time from</param>
            <param name="to">Date-time to</param>
            <returns>List string have day</returns>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.LoadHour">
            <summary>
            Load hour, hour from 00->23
            </summary>
            <returns>List string have month</returns>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.LoadMinuterOrSecond">
            <summary>
            Load minuter of second, minuter or second from 00->59
            </summary>
            <returns>List string have Minuter or second</returns>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToTimeViewModel`1._jumpToTimeCommand">
            <summary>
            Get or set Command of button jump to time.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.IsEnableButton">
            <summary>
            function check button jum to can execute or not.
            </summary>
            <returns>Return a bool value. true: can execute, false: cannot execute </returns>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToTimeViewModel`1.JumpToTimeCommandCL">
            <summary>
            Function callback when click button jump to time.
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.JumpToTimeViewModel`1.OnShowRecordWithDateTimeEvent">
            <summary>
            Action OnShowRecordWithDateTimeEvent by date and time
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel">
            <summary>
            Class provides method for User action tab
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.StopUserAction">
            <summary>
            Action stop analyze user action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.#ctor(System.Action{LogViewer.Model.CCSLogRecord},System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="onShowRecord">Action show record</param>
            <param name="stopUserAction">Action stop analyze user action</param>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.CancelUserActionCL">
            <summary>
            Function callback when cancel user action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.ClearData">
            <summary>
            Clear data in user action tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.LoadData(System.Collections.Generic.IList{LogViewer.Model.AnalyzedUserActionItem})">
            <summary>
            Load data to user action tab
            </summary>
            <param name="data">List user action result </param>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.IsEnableCopy">
            <summary>
            Check can execute copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.CopyCommandCL">
            <summary>
            Function callback when click copy menu item
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.OnShowRecord">
            <summary>
            Action show record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.IsLoadingData">
            <summary>
            Get or set IsLoadingData
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.DoubleClickedRecord">
            <summary>
            Set property double clicked record user action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.SelectedItems">
            <summary>
            Get or set SelectedItems
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.UserActionList">
            <summary>
            Get or set user action result list
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.IsShowTabUserAction">
            <summary>
            Get or set IsShowTabUserAction
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.CancelUserAction">
            <summary>
            Get or set cancel user action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogMain.AnalyzeTab.Tab.UserActionTabViewModel.CopyCommand">
            <summary>
            Get or set command for copy menu item
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList">
            <summary>
            Class provides method for recentory file
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.GetRecentFile(System.Windows.DependencyObject)">
            <summary>
            Get property RecentFile
            </summary>
            <param name="obj">DependencyObject</param>
            <returns>Recent file</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.SetRecentFile(System.Windows.DependencyObject,LogViewer.Model.RecentFileAction)">
            <summary>
            
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="value">Recent file</param>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentFileProperty">
            <summary>
            Dependency property for the <see cref="P:RecentFile"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RecentFilePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Recent file property changed
            </summary>
            <param name="o">Dependency object</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.UseRegistryPersister">
            <summary>
            Use registry persister
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.UseRegistryPersister(System.String)">
            <summary>
            Use registry persister by key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.UseXmlPersister">
            <summary>
            Use XML persister
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.UseXmlPersister(System.String)">
            <summary>
            Use XML persister by file
            </summary>
            <param name="filepath">File path</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.UseXmlPersister(System.IO.Stream)">
            <summary>
            Use XML persister by stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="F:LogViewer.Util.RecentFileList._Separator">
            <summary>
            Separator
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList._RecentFiles">
            <summary>
            List recent file
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentActionLoadCCS">
            <summary>
            Action recent when load CCS
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentActionLoadCXDI">
            <summary>
            Action recent when load CXDI
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.#ctor">
            <summary>
            Default constructor for RecentFileList
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.HookFileMenu">
            <summary>
            Hook file menu
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RemoveFile(System.String)">
            <summary>
            Remove file to recent list
            </summary>
            <param name="filepath">File path</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.InsertFile(System.String)">
            <summary>
            Insert file to recent list
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList._FileMenu_SubmenuOpened(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Open sub-menu in file menu
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.SetMenuItems">
            <summary>
            Set menu items
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RemoveMenuItems">
            <summary>
            Remove menu items
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.InsertMenuItems">
            <summary>
            Insert menu items
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.GetMenuItemText(System.Int32,System.String,System.String)">
            <summary>
            Get menu item text
            </summary>
            <param name="index">Index</param>
            <param name="filepath">File path</param>
            <param name="displaypath">Display path</param>
            <returns>Text of menu item</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.ShortenPathname(System.String,System.Int32)">
            <summary>
            Shortens a pathname for display purposes.
            </summary>
            <param labelName="pathname">The pathname to shorten.</param>
            <param labelName="maxLength">The maximum number of characters to be displayed.</param>
            <remarks>Shortens a pathname by either removing consecutive components of a path
            and/or by removing characters from the end of the filename and replacing
            then with three ellipses (...)
            <para>In all cases, the root of the passed path will be preserved in it's entirety.</para>
            <para>If a UNC path is used or the pathname and maxLength are particularly short,
            the resulting path may be longer than maxLength.</para>
            <para>This method expects fully resolved pathnames to be passed to it.
            (Use Path.GetFullPath() to obtain this.)</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.LoadRecentFiles">
            <summary>
            Load recent files
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.LoadRecentFilesCore">
            <summary>
            Load recent files core
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.MenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Menu item click
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.OnMenuClick(System.Windows.Controls.MenuItem)">
            <summary>
            On menu click
            </summary>
            <param name="menuItem">Menu item</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.HandleAction(System.String)">
            <summary>
            Handle Action when menu item click
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.GetFilepath(System.Windows.Controls.MenuItem)">
            <summary>
            Get file path of menu item
            </summary>
            <param name="menuItem">Menu item</param>
            <returns>File path of menu item</returns>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.Persister">
            <summary>
            Persister
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.MaxNumberOfFiles">
            <summary>
            Get or set maximum number of file
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.MaxPathLength">
            <summary>
            Get or set Maximum path length
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.FileMenu">
            <summary>
            Get or set menu item
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.MenuItemFormatOneToNine">
            <summary>
            Used in: String.Format( MenuItemFormat, index, filepath, displayPath );
            Default = "_{0}:  {2}"
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.MenuItemFormatTenPlus">
            <summary>
            Used in: String.Format( MenuItemFormat, index, filepath, displayPath );
            Default = "{0}:  {2}"
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.GetMenuItemTextHandler">
            <summary>
            Get or set GetMenuItemTextHandler
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.RecentFiles">
            <summary>
            Get RecentFiles
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.IPersist">
            <summary>
            Interface persist
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.IPersist.RecentFiles(System.Int32)">
            <summary>
            List recent file
            </summary>
            <param name="max">Maximum recent file</param>
            <returns>A collection</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.IPersist.InsertFile(System.String,System.Int32)">
            <summary>
            Insert file to recent list
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.IPersist.RemoveFile(System.String,System.Int32)">
            <summary>
            Remove file to recent list
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.GetMenuItemTextDelegate">
            <summary>
            Get delegate menu item text
            </summary>
            <param name="index">Index</param>
            <param name="filepath">File path</param>
            <returns></returns>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.RecentFile">
            <summary>
            Class Recent file model
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentFile.Number">
            <summary>
            Number of recent
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentFile.Filepath">
            <summary>
            File path
            </summary>
        </member>
        <member name="F:LogViewer.Util.RecentFileList.RecentFile.MenuItem">
            <summary>
            Menu item
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RecentFile.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="number"></param>
            <param name="filepath"></param>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.RecentFile.DisplayPath">
            <summary>
            Display path
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.MenuClickEventArgs">
            <summary>
            Class provides method for click menu 
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.MenuClickEventArgs.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="filepath">File path</param>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.MenuClickEventArgs.Filepath">
            <summary>
            Get or set File path
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.RegistryPersister">
            <summary>
            Class provides method for registry persister
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.#ctor(System.String)">
            <summary>
            Constructor by key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.Key(System.Int32)">
            <summary>
            Get key by index
            </summary>
            <param name="i">Index</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.RecentFiles(System.Int32)">
            <summary>
            Get recent list by maximum recent file
            </summary>
            <param name="max"></param>
            <returns>A collection file path</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.InsertFile(System.String,System.Int32)">
            <summary>
            Insert file to recent file
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.RemoveFile(System.String,System.Int32)">
            <summary>
            Remove file by file path to recent file
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.RegistryPersister.RemoveFile(System.Int32,System.Int32)">
            <summary>
            Remove file by index to recent file
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.RegistryPersister.RegistryKey">
            <summary>
            Get or set Registry key
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.XmlPersister">
            <summary>
            Class provides method for save file path to XML file
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.#ctor(System.String)">
            <summary>
            Constructor by file path
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.#ctor(System.IO.Stream)">
            <summary>
            Constructor by stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.RecentFiles(System.Int32)">
            <summary>
            Get List file path by maximum recent file
            </summary>
            <param name="max"></param>
            <returns>A collection string</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.InsertFile(System.String,System.Int32)">
            <summary>
            Insert file path
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.RemoveFile(System.String,System.Int32)">
            <summary>
            Remove file path
            </summary>
            <param name="filepath">File path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.Update(System.String,System.Boolean,System.Int32)">
            <summary>
            Update file path
            </summary>
            <param name="filepath">File path</param>
            <param name="insert">Status insert</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.CopyExcluding(System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Copy excluding
            </summary>
            <param name="source">List file path</param>
            <param name="exclude">string exclude</param>
            <param name="target">List target</param>
            <param name="max">Maximum number</param>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.OpenStream(System.IO.FileMode)">
            <summary>
            Open stream
            </summary>
            <param name="mode">File mode</param>
            <returns>Smart Stream</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.Load(System.Int32)">
            <summary>
            Load file path from xml file
            </summary>
            <param name="max">Maximum recent file</param>
            <returns>A collection string</returns>
        </member>
        <member name="M:LogViewer.Util.RecentFileList.XmlPersister.Save(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Save list file path to XML file
            </summary>
            <param name="list">List file path</param>
            <param name="max">Maximum recent file</param>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.XmlPersister.Filepath">
            <summary>
            Get or set file path
            </summary>
        </member>
        <member name="P:LogViewer.Util.RecentFileList.XmlPersister.Stream">
            <summary>
            Get or set stream
            </summary>
        </member>
        <member name="T:LogViewer.Util.RecentFileList.XmlPersister.SmartStream">
            <summary>
            Class provides method open file 
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialog">
            <summary>
            Class wrapping System.Windows.Forms.FolderBrowserDialog, making it accept a ViewModel.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialog.#ctor(LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog)">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialog"/> class.
            </summary>
            <param name="folderBrowserDialog">The interface of a folder browser dialog.</param>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Runs a common dialog box with the specified owner.
            </summary>
            <param name="owner">
            Any object that implements System.Windows.Forms.IWin32Window that represents the top-level
            window that will own the modal dialog box.
            </param>
            <returns>
            System.Windows.Forms.DialogResult.OK if the user clicks OK in the dialog box; otherwise,
            System.Windows.Forms.DialogResult.Cancel.
            </returns>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.GetLineOfContent(System.Windows.DependencyObject)">
            <summary>
            Get property LineOfContent
            </summary>
            <param name="obj">DependencyObject</param>
            <returns>line of content</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.SetLineOfContent(System.Windows.DependencyObject,System.String)">
            <summary>
            Set property LineOfContent
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="value">Line of content</param>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.LineOfContentProperty">
            <summary>
            Dependency property for the <see cref="P:LineOfContent"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.OnLineOfContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On Line of Content Property changed
            </summary>
            <param name="o">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.GetDocumentXaml(System.Windows.DependencyObject)">
            <summary>
             Get property content value of rich text box
             </summary>
             <param name="obj">DependencyObject</param>
             <returns>content of rich text box</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.SetDocumentXaml(System.Windows.DependencyObject,System.String)">
            <summary>
            Set property content value of rich text box
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="value">Value for set to content</param>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.DocumentXamlProperty">
            <summary>
            Dependency property for the <see cref="P:DocumentXaml"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.OnDocumentXamlPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On document xaml property changed.
            </summary>
            <param name="o">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.ShowPatternColoringProperty">
            <summary>
            Dependency property for the <see cref="P:ShowPatternColoring"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.GetShowPatternColoring(System.Windows.DependencyObject)">
            <summary>
             Get property ShowPatternColoring of rich text box
             </summary>
             <param name="obj">DependencyObject</param>
             <returns>object</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.SetShowPatternColoring(System.Windows.DependencyObject,System.Object)">
            <summary>
             Set property ShowPatternColoring of rich text box
             </summary>
             <param name="obj">DependencyObject</param>
             <param name="value">object</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.OnShowPatternColoringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On ShowPatternColoringChanged
            </summary>
            <param name="o">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.ShowPatternColoring(System.Windows.Controls.RichTextBox,System.Object,System.Collections.Generic.List{LogViewer.Business.FilterItemSetting})">
            <summary>
            Show pattern coloring when click in data grid of pattern analyzer tab.
            </summary>
            <param name="richTextBox">Rich text box content or message</param>
            <param name="pattern">type of object pattern is PatternColor</param>
            <param name="filterItemSetting">A collection FilterItemSetting</param>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.FilterToShowProperty">
            <summary>
            Dependency property for the <see cref="P:FilterToShow"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.GetFilterToShow(System.Windows.DependencyObject)">
            <summary>
             Get property FilterToShow of rich text box
             </summary>
             <param name="obj">DependencyObject</param>
             <returns>object</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.SetFilterToShow(System.Windows.DependencyObject,System.Object)">
            <summary>
             Set property FilterToShow of rich text box
             </summary>
             <param name="obj">DependencyObject</param>
             <param name="value">object</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.OnFilterToShowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On FilterToShowChanged
            </summary>
            <param name="o">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.AddItem(System.Collections.Generic.List{LogViewer.Business.FilterItemSetting},LogViewer.Business.FilterItemSetting)">
            <summary>
            Add item to list FilterItemSetting <see cref="T:LogViewer.Business.FilterItemSetting"/>, if not contains in list-&gt; add  else merge color with item exists.
            </summary>
            <param name="itemSettingSplit">List FilterItemSetting</param>
            <param name="item">FilterItemSetting</param>
            <returns>List FilterItemSetting</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.ExtractFilterStringRegular(System.Collections.Generic.List{LogViewer.Business.FilterItemSetting},System.String)">
            <summary>
            Extract filter string contains regular
            </summary>
            <param name="effectiveFilterSettingList">List FilterItemSetting have regular</param>
            <param name="value">Content of richtextbox</param>
            <returns>List FilterItemSeting after extract</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.RBGToHex(LogViewer.MVVMHelper.RichTextBoxHelper.RGB)">
            <summary>
            Change color from RGB to hex string
            </summary>
            <param name="rgb">RGB Color</param>
            <returns>Hex string</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.ColorToRGB(System.String)">
            <summary>
            Change color from hex to RGB
            </summary>
            <param name="hex">hex string</param>
            <returns>RGB color</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.mixLabColor(LogViewer.MVVMHelper.RichTextBoxHelper.CIELab,LogViewer.MVVMHelper.RichTextBoxHelper.CIELab)">
            <summary>
            Mid to lab color
            </summary>
            <param name="color1">CIELab color1</param>
            <param name="color2">CIELab color2</param>
            <returns>CIELab color</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.IndexOfAll(System.String,System.String,System.Boolean)">
            <summary>
            Get Index of sub string in parent string with lower case
            </summary>
            <param name="str">parent string</param>
            <param name="substr">sub string</param>
            <param name="ignoreCase"></param>
            <returns>A collect of index</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.IndexOfAll1(System.String,System.String,System.Boolean)">
            <summary>
            Get Index of sub string in parent string without lower case
            </summary>
            <param name="str">parent string</param>
            <param name="substr">sub string</param>
            <param name="ignoreCase"></param>
            <returns>A collection of index</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.LongestCommonSubstring(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get common substring of str1 and str2 using index and length base on parent string
            </summary>
            <param name="str">Parent string</param>
            <param name="index1">Index of string 1 in parent string</param>
            <param name="index2">Index of string 2 in parent string</param>
            <param name="length1">Length of string 1</param>
            <param name="length2">Length of string 2</param>
            <returns>A collection of string</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.SetFontStyle(System.Windows.Documents.Run,System.String)">
            <summary>
            Set font style to Control 
            </summary>
            <param name="control">Run</param>
            <param name="fontStyle">font style string</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.Fxyz(System.Double)">
            <summary>
            XYZ to L*a*b* transformation function.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.XYZtoLab(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIEXYZ to CIELab.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.RGBtoLab(LogViewer.MVVMHelper.RichTextBoxHelper.RGB)">
            <summary>
            Converts RGB to CIELab.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.RGBtoXYZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to CIE XYZ (CIE 1931 color space)
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.LabtoRGB(LogViewer.MVVMHelper.RichTextBoxHelper.CIELab)">
            <summary>
            Converts CIELab to RGB.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.XYZtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIEXYZ to RGB structure.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.LabtoXYZ(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIELab to CIEXYZ.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.RichTextBoxHelper.FilterItemMerge">
            <summary>
            Class contains a collection can merge.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RichTextBoxHelper.FilterItemMerge.#ctor">
            <summary>
            Initialize FilterItemMerge
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.FilterItemMerge.IsMerge">
            <summary>
            Get and set IsMerge
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.FilterItemMerge.ItemSetings">
            <summary>
            Get and Set Collection 
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.RichTextBoxHelper.CIELab">
            <summary>
            Structure to define CIE L*a*b*.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.CIELab.Empty">
            <summary>
            Gets an empty CIELab structure.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIELab.L">
            <summary>
            Gets or sets L component.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIELab.A">
            <summary>
            Gets or sets a component.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIELab.B">
            <summary>
            Gets or sets a component.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ">
            <summary>
            Structure to define CIE XYZ.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ.Empty">
            <summary>
            Gets an empty CIEXYZ structure.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ.D65">
            <summary>
            Gets the CIE D65 (white) structure.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ.X">
            <summary>
            Gets or sets X component.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ.Y">
            <summary>
            Gets or sets Y component.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.CIEXYZ.Z">
            <summary>
            Gets or sets Z component.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.RichTextBoxHelper.RGB">
            <summary>
            RGB structure.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.RichTextBoxHelper.RGB.Empty">
            <summary>
            Gets an empty RGB structure;
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.RGB.Red">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.RGB.Green">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.RichTextBoxHelper.RGB.Blue">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.DataGridDragDropBehavior">
            <summary>
            Class handle event drag drop for data grid.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DataGridDragDropBehavior.CommandProperty">
            <summary>
            Dependency property for drag drop Command.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DataGridDragDropBehavior.AllowedEffectsProperty">
            <summary>
            Dependency property for AllowedEffects.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataGridDragDropBehavior.OnAttached">
            <summary>
            On attached drag drop event.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataGridDragDropBehavior.DataGrid_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Drop file to data grid.
            <param name="sender">Data grid</param>
            <param name="e">Drag event args</param>
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataGridDragDropBehavior.AllowedEffects">
            <summary>
            The value to match against the input value of AllowedEffects.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataGridDragDropBehavior.Command">
            <summary>
            The value to match against the input value of Command.
            </summary>
        </member>
        <member name="T:LogViewer.Model.StringLineIndexLevelPair`5">
            <summary>
            Model class for storing information of string in a given line of log <seealso cref="!:AnalyzePattern"/>
            </summary>
            <typeparam name="TString">Pattern string</typeparam>
            <typeparam name="TIndex">Index of string </typeparam>
            <typeparam name="TLine">Line of log record</typeparam>
            <typeparam name="TLevel">Level of key string</typeparam>
            <typeparam name="TDateTime">Date time of log record</typeparam>
        </member>
        <member name="M:LogViewer.Model.StringLineIndexLevelPair`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Default constructor
            </summary>
            <param name="str">Pattern string</param>
            <param name="index">Index of string</param>
            <param name="line">Line for log record</param>
            <param name="level">Level of key string</param>
            <param name="dateTime">Date time of log record</param>
        </member>
        <member name="P:LogViewer.Model.StringLineIndexLevelPair`5.String">
            <summary>
            Get or set pattern string
            </summary>
        </member>
        <member name="P:LogViewer.Model.StringLineIndexLevelPair`5.Index">
            <summary>
            Get or set index of string
            </summary>
        </member>
        <member name="P:LogViewer.Model.StringLineIndexLevelPair`5.Line">
            <summary>
            Get or set line of log record
            </summary>
        </member>
        <member name="P:LogViewer.Model.StringLineIndexLevelPair`5.Level">
            <summary>
            Get or set level of key string
            </summary>
        </member>
        <member name="P:LogViewer.Model.StringLineIndexLevelPair`5.DateTime">
            <summary>
            Get or set date time of log record
            </summary>
        </member>
        <member name="T:LogViewer.Business.GraphParamSetting">
            <summary>
            Class provides method for process graph parameter
            </summary>
        </member>
        <member name="T:LogViewer.Business.BaseItemSetting">
            <summary>
            Base Class provides common method for process item setting
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseItemSetting.Id">
            <summary>
            Get or set ID
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseItemSetting.Name">
            <summary>
            Get or set Name
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseItemSetting.Enabled">
            <summary>
            Get or set status of item
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseItemSetting.Error">
            <summary>
            Get error string.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseItemSetting.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="M:LogViewer.Business.GraphParamSetting.Copy">
            <summary>
            Clone to new object
            </summary>
            <returns><see cref="!:GraphParameterSetting"/></returns>
        </member>
        <member name="P:LogViewer.Business.GraphParamSetting.StringValue">
            <summary>
            Get or set value for parameter
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphParamSetting.PrototypeValue">
            <summary>
            Get or set <see cref="T:LogViewer.Model.Prototype"/>
            </summary>
        </member>
        <member name="P:LogViewer.Business.GraphParamSetting.GraphTypeValue">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphType"/>
            </summary>
        </member>
        <member name="T:LogViewer.Business.AnalyzePattern`1">
            <summary>
            Class provides methods for analyzing pattern.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LogViewer.Business.IAnalyzePattern`1">
            <summary>
            Interface of Analyze pattern class. All pattern analyze pattern must implement this interface.
            </summary>
            <typeparam name="T">Type of log records this can be <see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see> or <see cref="T:LogViewer.Model.CXDILogRecord">CXDILogRecord</see>
            </typeparam>
        </member>
        <member name="M:LogViewer.Business.AnalyzePattern`1.DoAnalyzePattern(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{LogViewer.Business.PatternItemSetting},System.Func{`0,System.String},System.ComponentModel.BackgroundWorker)">
            <summary>
            Find records that matched with provided pattern by user.
            </summary>
            <param name="logRecordList">List of log record. T is generic log record class which can be <see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see> or <see cref="T:LogViewer.Model.CXDILogRecord">CXDILogRecord</see>
            </param>
            <param name="patternItemSettings"></param>
            <param name="GetColumnContentValue"></param>
            <param name="AnalyzePatternWorker"></param>
            <returns></returns>
        </member>
        <member name="T:LogViewer.View.SetRangeOfGraphView">
            <summary>
            Interaction logic for SettingParameterOfGraphView.xaml
            </summary>
            <summary>
            SetRangeOfGraphView
            </summary>
        </member>
        <member name="M:LogViewer.View.SetRangeOfGraphView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.SwitchConverter">
            <summary>
            Produces an output value based upon a collection of case statements.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwitchConverter"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchConverter.#ctor(LogViewer.MVVMHelper.SwitchCaseCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SwitchConverter"/> class.
            </summary>
            <param name="cases">The case collection.</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchConverter.TryConvert(System.Globalization.CultureInfo,System.Object,System.Object@)">
            <summary>
            Attempts to use the IConvertible interface to convert <paramref name="value2"/> into a type
            compatible with <paramref name="value1"/>.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value1">The input value.</param>
            <param name="value2">The case value.</param>
            <returns>True if conversion was performed, otherwise false.</returns>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchConverter.Cases">
            <summary>
            Holds a collection of switch cases that determine which output
            value will be produced for a given input value.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchConverter.StringComparison">
            <summary>
            Specifies the type of comparison performed when comparing the input
            value against a case.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchConverter.Else">
            <summary>
            An optional value that will be output if none of the cases match.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.CommandReference">
            <summary>
            This class facilitates associating a key binding in XAML markup to a command
            defined in a View Model by exposing a Command dependency property.
            The class derives from Freezable to work around a limitation in WPF when data-binding from XAML.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandReference.#ctor">
            <summary>
            Initializes the <see cref="T:CommandReference"/> class.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.CommandReference.CommandProperty">
            <summary>
            Dependency property for the Command property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandReference.CanExecute(System.Object)">
            <summary>
            Check Command can execute.
            <param name="parameter">Parameter to executer</param>
            <returns>A boolean value. true is can execute : false is cannot execute</returns>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandReference.Execute(System.Object)">
            <summary>
            Execute command
            <param name="parameter">Parameter to executer</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandReference.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When command changed.Set value to oldCommand and newCommand.
            <param name="d">Dependency object</param>
            <param name="e">Dependency property changed event</param>
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.CommandReference.Command">
            <summary>
            The value to match against the input value.
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseLogMainViewModel`1">
            <summary>
            Base class provides common methods for analyze log data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.#ctor(System.Object,LogViewer.Business.FileSetting.BaseSettingManager,System.Action{System.String,System.String},System.Action{System.String,System.Boolean})">
            <summary>
            Default constructor
            </summary>
            <param name="mainViewVM">Main model view</param>
            <param name="settingManager"><see cref="T:LogViewer.Business.FileSetting.BaseSettingManager"/></param>
            <param name="onFollowOtherLogEvent">Process for follow mode action</param>
            <param name="onRecentFileChange">Process for recent file change </param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.InitLogItemList">
            <summary>
            Get item log from <see cref="P:LogViewer.Model.ConfigValue.CCSHeader.AllLogField"/> or <see cref="P:LogViewer.Model.ConfigValue.CXDIHeader.AllLogField"/> in case there are no default one from setting file
            </summary>
            <returns>List of log display</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.AddMoreBookmarkCL">
            <summary>
            Command for add bookmark
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.OpenPopupCommandCL">
            <summary>
            Command for opening popup
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClosePopupCommandCL">
            <summary>
            Command for closing pop-up
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.DragDropFile(LogViewer.MVVMHelper.DataGridDragDropEventArgs)">
            <summary>
            Command for drag and drop
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.IsExecuteDrag(LogViewer.MVVMHelper.DataGridDragDropEventArgs)">
            <summary>
            Get status of executing drag
            </summary>
            <param name="args"><see cref="T:LogViewer.MVVMHelper.DataGridDragDropEventArgs"/></param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadLogFileCL">
            <summary>
            Command for loading log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.loadLogFileAddRecent(System.String)">
            <summary>
            Command interface for recent log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ProcessBeforeLoadLog(System.String)">
            <summary>
            Re-check from file name before use to parsing file
            </summary>
            <param name="fileName">File path</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadDataLogFile(System.String,System.Boolean)">
            <summary>
            Load data log file
            </summary>
            <param name="fileName">File path</param>
            <param name="isAdd">True: for specify that file will be add to buffer; False: for replace</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ValidLogFileExtension(System.String)">
            <summary>
            Validate log file extension
            </summary>
            <param name="FilePath">File path</param>
            <returns>True: if valid, otherwise is False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadMemoLogFileCL">
            <summary>
            Command for loading memo log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.loadMemoAddRecent(System.String)">
            <summary>
            Command interface for loading and add log file to recent
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ExportMemoLogFileCL">
            <summary>
            Command for exporting memo log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GetExportFilePath">
            <summary>
            Get path for exporting file
            </summary>
            <returns>File name</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.EditFilterSettingCL">
            <summary>
            Command for editing filtering
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearColorFilterSettingCommandCL">
            <summary>
            Command for clearing color filter setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearColorFilterSetting">
            <summary>
            Command for clearing color filter setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.SelectAllFilterSettingCommandCL">
            <summary>
            Command for selecting all filter setting
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.EditPatternSettingCL">
            <summary>
            Command for editing pattern setting
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearWhenLoadFile">
            <summary>
            Stop any process and clear any display result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearAllCommandCL">
            <summary>
            Command for stoping and clearing any result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearAnalyzeCommandCL">
            <summary>
            Command for clearing analyzed result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearNarrowFilter">
            <summary>
            Clear narrow filter data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadDataWhenClearColor">
            <summary>
            Reload data when clear color
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.JumpToLineCommandCL">
            <summary>
            Command for jump to line action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.JumpToLine(System.Int32)">
            <summary>
            Jump to specify line
            </summary>
            <param name="line">Line of log</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.Search(LogViewer.Model.SearchItem)">
            <summary>
            Search text from log file
            </summary>
            <param name="searchCondition"><see cref="T:LogViewer.Model.SearchItem"/></param>
            <returns>List of record matched with search condition</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.JumpToTimeCommandCL">
            <summary>
            Command for jump to line, condition for jumping is time
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GoToTopCommandCL">
            <summary>
            Command for go to top action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GoToBotCommandCL">
            <summary>
            Command for go to bottom action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ExpandCommandCL">
            <summary>
            Command for expanding action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ShirnkCommandCL">
            <summary>
            Command for shrinking action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ShowRecord(`0)">
            <summary>
            Show specified record
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.PatternAnalyserCommandCL">
            <summary>
            Command for analyzing pattern
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.CountKeywordCommandCL">
            <summary>
            Command for keyword count setting
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ProcessTimeCommandCL">
            <summary>
            Command for processing time
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.EditKeywordCountSettingCL">
            <summary>
            Command for editing keyword count
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.NarrowNonColorFilterCL">
            <summary>
            Command for narrow non color filtering action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.NarrowColorFilterCL">
            <summary>
            Command for narrow color filter action
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.BaseLogMainViewModel`1.OnClickRecordChange(System.Object)" -->
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ProcessTimeLog(System.Collections.Generic.List{LogViewer.ViewModel.BaseLogRecordDisplayViewModel{`0}})">
            <summary>
            Calculate for process time of log
            </summary>
            <param name="logDisplays"></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GetDefaultLogItem">
            <summary>
            Get default log Item
            </summary>
            <returns>Log item name</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ApplyFilterSetting(System.Collections.Generic.List{LogViewer.Business.FilterItemSetting})">
            <summary>
            Apply for filter setting
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Business.FilterItemSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ApplyKeywordCountSetting(System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting})">
            <summary>
            Apply for keyword count setting
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Business.KeywordCountItemSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ApplyPatternSetting(System.Collections.Generic.List{LogViewer.Business.PatternItemSetting})">
            <summary>
            Apply for pattern setting
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Business.PatternItemSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.AddBookmark(`0)">
            <summary>
            Mark a record as bookmark
            </summary>
            <param name="record">Generic log record, can be: <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.RemoveBookmark(`0)">
            <summary>
            Remove record from bookmark list
            </summary>
            <param name="record">Generic log record, can be: <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.BaseLogMainViewModel`1.ConvertToTimestamp(System.DateTime)" -->
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ShowRecordWithDateTime(System.String,System.String)">
            <summary>
            Show record  by given date and time
            </summary>
            <param name="date">Given date</param>
            <param name="time">Given time</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.FollowRecordWithDateTime(System.String,System.String)">
            <summary>
            Process follow mode by given date and time
            </summary>
            <param name="date">Given date</param>
            <param name="time">Given time</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GetDateTime(System.String,System.String)">
            <summary>
            Combine date and time to date time
            </summary>
            <param name="date">Given date</param>
            <param name="time">Given time</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.CreateEditFilterSettingVM(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})">
            <summary>
            Create view model object for filter setting
            </summary>
            <param name="onApply">Process for on apply action</param>
            <returns><see cref="T:LogViewer.ViewModel.EditFilterSettingViewModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadConfig">
            <summary>
            Load config from setting file
            </summary>
            <returns>Empty string if have no error, otherwise will return error message</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.CountKeyword(System.Collections.Generic.IList{LogViewer.Business.KeywordCountItemSetting})">
            <summary>
            Do keyword count 
            </summary>
            <param name="settings">List of keyword count setting</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.StopKeywordCountWorker">
            <summary>
            Stop keyword count thread
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.StopAnalyzePatternWorker">
            <summary>
            Stop anaylyze pattern thread
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.StopAllAnalyProcess">
            <summary>
            Stop all analyze background process
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.StartAllAnalyzeProcess">
            <summary>
            Start all analyze background process
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.AnalyzePattern(System.Collections.Generic.IList{LogViewer.Business.PatternItemSetting})">
            <summary>
            Do analyze for pattern
            </summary>
            <param name="settings">is a list of pattern setting</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GetFilterButtonList(System.Collections.Generic.IList{LogViewer.Business.FilterItemSetting})">
            <summary>
            Get list of filter setting item 
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Business.FilterItemSetting"/></param>
            <returns>List of <see cref="T:LogViewer.ViewModel.FilterButtonViewModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.DelegateFilterButtonViewModel">
            <summary>
            Delegate function list filter setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.UpdateCurrentFileName(`0)">
            <summary>
            Refresh to current log file name
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.contains(`0,System.String)">
            <summary>
            Get sub string status of a string key with message column of <see cref="T:LogViewer.Model.CXDILogRecord"/>
            </summary>
            <param name="record">Generic log record, can be: <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></param>
            <param name="key">A substring to be search</param>
            <returns>True: if the message column of log record contain given key, otherwise is false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.BaseLogMainViewModel`1.ShowPatternColoringRecord(`0,LogViewer.Model.AnalyzedPatternResultItem{`0})" -->
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.OnOtherLogsLoadedHandler">
            <summary>
            Determined with side of log record list follow other
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.ValidateStringFilter">
            <summary>
            Validate for value of filter string
            </summary>
            <returns>Empty string if had no error, otherwise will return error message</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogMainViewModel`1.GetKeywords">
            <summary>
            Extract search keyword from input
            </summary>
            <returns>List of keyword</returns>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.OpenFileFilter">
            <summary>
            Get filtering pattern for opening file <see cref="P:LogViewer.Model.ConfigValue.CCSFileFilter"/> or <see cref="P:LogViewer.Model.ConfigValue.CXDIFileFilter"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.OpenMemoFilterFile">
            <summary>
            Get filtering pattern for opening memo file <see cref="P:LogViewer.Model.ConfigValue.MemoFilterFile"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:LogViewer.ViewModel.BaseLogMainViewModel`1.HasLogsData" -->
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ClickedRecordChange">
            <summary>
            Get or set the record that has change status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.IsOnNarrowColorFilter">
            <summary>
            Get or set on narrow color filtering status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.IsOnNarrowNonColorFilter">
            <summary>
            Get or set on narrow no color filtering status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.FilterSettingList">
            <summary>
            Get or set list of filtering setting items
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.DisplaySetting">
            <summary>
            Get or set display setting item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.IsOpenPopup">
            <summary>
            Get or set opening status of pop-up
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.LogsDisplayVM">
            <summary>
            Get view model of log display object
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.BaseAnalyzeAreaVM">
            <summary>
            Get view model of analyze area
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.CurrentLogFileName">
            <summary>
            Get or set current log file name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.LogItemList">
            <summary>
            Get or set list of log items
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.LogItem">
            <summary>
            Get or set log item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.StringFilter">
            <summary>
            Get or set string value for filtering
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.AddMoreBookmark">
            <summary>
            Command interface for adding more bookmark
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.OpenPopupCommand">
            <summary>
            Command interface for opening popup
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ClosePopupCommand">
            <summary>
            Command interface for closing pop-up
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.DragDropCommand">
            <summary>
            Command interface for drag and drop
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadLogFileCommand">
            <summary>
            Command interface for loading log file
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.LoadMemoLogFileCommand">
            <summary>
            Command interface for loading memo log file
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ExportMemoLogFileCommand">
            <summary>
            Command interface for exporting memo log file
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.EditFilterSettingCommand">
            <summary>
            Command interface for editing filter item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearColorFilterSettingCommand">
            <summary>
            Command interface for clearing color filter setting item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.SelectAllFilterSettingCommand">
            <summary>
            Command interface for selecting all filter setting
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.EditPatternSettingCommand">
            <summary>
            Command interface for editing pattern setting
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearAllCommand">
            <summary>
            Command interface for clearing any result
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ClearAnalyzeCommand">
            <summary>
            Command interface for clearing analyzed result
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.JumpToLineCommand">
            <summary>
            Command interface for jump to line action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.JumpToTimeCommand">
            <summary>
            Command interface for jump to line, condition for jumping is time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.GoToTopCommand">
            <summary>
            Command interface for go to top action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.GoToBotCommand">
            <summary>
            Command interface for go to bottom action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ExpandCommand">
            <summary>
            Command interface for expanding action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.IsEnableButtonFilter">
            <summary>
            Get enable status of filter button
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ShirnkCommand">
            <summary>
            Command interface for shrinking action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.PatternAnalyserCommand">
            <summary>
            Command interface for analyzing pattern
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.CountKeywordCommand">
            <summary>
            Command interface for keyword count setting
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.ProcessTimeCommand">
            <summary>
            Command interface for processing time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.EditKeywordCountSettingCommand">
            <summary>
            Command interface for editing keyword count
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.NarrowNonColorFilterCommand">
            <summary>
            Command interface for narrow non color filtering action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.NarrowColorFilterCommand">
            <summary>
            Command interface for narrow color filter action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.MainViewModelObject">
            <summary>
            Get of set main view model object
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogMainViewModel`1.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.LogDisplayRecordViewModel">
            <summary>
            ViewModel contains data of log display in data grid, ex: Column line, data, content is show or hide in grid 
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.LogDisplayRecordViewModel._key">
            <summary>
            Get and set Key property
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.LogDisplayRecordViewModel._value">
            <summary>
            Get and set Value 
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogDisplayRecordViewModel.#ctor(LogViewer.Model.LogDisplay)">
            <summary>
            Initializes a new instance of the LogDisplayRecordViewModel class.
            </summary>
            <param name="logDisplay"><see cref="T:LogViewer.Model.LogDisplay"/></param>
        </member>
        <member name="P:LogViewer.ViewModel.LogDisplayRecordViewModel.DisplayKey">
            <summary>
            Get and Set DisplayKey
            </summary>
        </member>
        <member name="T:LogViewer.Service.ServiceLocator">
            <summary>
            A very simple service locator.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.Register``2">
            <summary>
            Registers a service.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.RegisterSingleton``2">
            <summary>
            Registers a service as a singleton.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.UnRegisterSingleton``2">
            <summary>
            Registers a service as a singleton.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.Resolve``1">
            <summary>
            Resolves a service.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.Register``2(System.Boolean)">
            <summary>
            Registers a service.
            </summary>
            <param name="isSingleton">true if service is Singleton; otherwise false.</param>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.UnRegister``2(System.Boolean)">
            <summary>
            Registers a service.
            </summary>
            <param name="isSingleton">true if service is Singleton; otherwise false.</param>
        </member>
        <member name="T:LogViewer.Service.ServiceLocator.ServiceInfo">
            <summary>
            Class holding service information.
            </summary>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.ServiceInfo.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.Service.ServiceLocator.ServiceInfo"/> class.
            </summary>
            <param name="serviceImplementationType">Type of the service implementation.</param>
            <param name="isSingleton">Whether the service is a Singleton.</param>
        </member>
        <member name="M:LogViewer.Service.ServiceLocator.ServiceInfo.CreateInstance(System.Type)">
            <summary>
            Creates an instance of a specific type.
            </summary>
            <param name="type">The type of the instance to create.</param>
        </member>
        <member name="P:LogViewer.Service.ServiceLocator.ServiceInfo.ServiceImplementation">
            <summary>
            Gets the service implementation.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.ItemsControlExtensions">
            <summary>
            Class handle event scroll focus to center of grid.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.ItemsControlExtensions.ScrollToCenterOfView(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Scroll to center of data grid
            </summary>
            <param name="itemsControl">Source collection in data grid</param>
            <param name="item">Item to scroll</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.ItemsControlExtensions.TryScrollToCenterOfView(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Try scroll to center of data grid
            </summary>
            <param name="itemsControl">Source collection in data grid</param>
            <param name="item">Item to scroll</param>
            <returns>Return true if can, return false if not</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.ItemsControlExtensions.CenteringOffset(System.Double,System.Double,System.Double)">
            <summary>
            Get center position of grid
            </summary>
            <param name="center"></param>
            <param name="viewport"></param>
            <param name="extent"></param>
            <returns>bool value</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.ItemsControlExtensions.FirstVisualChild(System.Windows.Media.Visual)">
            <summary>
            Find visual child of Parent object
            </summary>
            <param name="visual">Parent object</param>
            <returns>Dependency object</returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.FontStyleHelper">
            <summary>
            Class handle event when font style changed
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.FontStyleHelper.FontStyleProperty">
            <summary>
            Dependency property for the <see cref="P:FontStyle"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.FontStyleHelper.GetFontStyle(System.Windows.DependencyObject)">
            <summary>
            Get property FontStyle
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.FontStyleHelper.SetFontStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property FontStyle
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.FontStyleHelper.OnFontStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On Font Style Changed
            <param name="o">Dependency Object</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="T:LogViewer.Model.Cage">
            <summary>
            Model class supporting for pattern analyze process.
            </summary>
        </member>
        <member name="F:LogViewer.Model.Cage.elementOfCage">
            <summary>
            Get or set element of cage
            </summary>
        </member>
        <member name="P:LogViewer.Model.Cage.IsPattern">
            <summary>
            Get or set is value that specified pattern had been detected.
            </summary>
        </member>
        <member name="T:LogViewer.View.GraphView">
            <summary>
            Interaction logic for ShowGraphView.xaml
            </summary>
            <summary>
            GraphView
            </summary>
        </member>
        <member name="M:LogViewer.View.GraphView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialogViewModel">
            <summary>
            Interface describing the FolderBrowserDialogViewModel.
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog">
            <summary>
            Interface describing the FolderBrowserDialog.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog.Description">
            <summary>
            Gets or sets the descriptive text displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog.SelectedPath">
            <summary>
            Gets or sets the path selected by the user.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog.ShowNewFolderButton">
            <summary>
            Gets or sets a value indicating whether the New Folder button appears in the folder browser
            dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialogViewModel.Description">
            <summary>
            Gets or sets the descriptive text displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialogViewModel.SelectedPath">
            <summary>
            Gets or sets the path selected by the user.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FolderBrowse.FolderBrowserDialogViewModel.ShowNewFolderButton">
            <summary>
            Gets or sets a value indicating whether the New Folder button appears in the folder browser
            dialog box.
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CcsFileParserType">
            <summary>
            Version of all CCS log file: CcsVersion1(for the old version), CcsVersion2 (for the new version), UnknowFormat(undetected version)
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CxdiFileParserType">
            <summary>
            Version of CXDI log file: CxdiVersion1(only one version currently), UnknowFormat(undetected version)
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.LogFileExt">
            <summary>
            For detecting type of file: Memo(if the file is a memo file), CCS (if the file is CCS), CXDI(if the file is CXDI), UnknowType (cannot detected file)
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.ParserManager">
            <summary>
            Class provides static methods for detection file type, get the right log parser, memo parser object
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileParser.ParserManager.BeginLogLineFormatCcsVersion1">
            <summary>
            Pattern for detection a new version CCS log file. The date format of log record will be used to detect CCS version.
            Detection format for CCS old version is: "number-number-number number:number:number.number"
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileParser.ParserManager.BeginLogLineFormatCcsVersion2">
            <summary>
            Pattern for detection a new version CCS log file. The date format of log record will be used to detect CCS version.
            Detection format for CCS old version is: "number/number/number number:number:number.number"
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.DetectFileType(System.String)">
            <summary>
            Detect file type
            </summary>
            <param name="filePath">Location of file</param>
            <returns>Type of file, see the <see cref="T:LogViewer.Business.FileParser.LogFileExt"/></returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.DetectTypeOfMemoFile(System.String)">
            <summary>
            Detect file type
            </summary>
            <param name="filePath">Location of file</param>
            <returns>Type of file, see the <see cref="T:LogViewer.Business.FileParser.LogFileExt"/></returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.GetCcsMemoParser(System.String)">
            <summary>
            Auto detect and return parser object depend on version of CCS memo file.
            </summary>
            <param name="filePath">Location of file</param>
            <returns>Parser object, any of type: <see cref="T:LogViewer.Business.FileParser.CCSMemoParserOld"/>, <see cref="T:LogViewer.Business.CCSMemoParserNew"/> or throw Exception if 
            cannot detect the format</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.GetCcsCsvParser(System.String)">
            <summary>
            Auto detect and return parser object depend on version of CCS file.
            </summary>
            <param name="filePath">Location of file</param>
            <returns>Parser object, any of type: <see cref="T:LogViewer.Business.FileParser.CCSMemoParserOld"/>, <see cref="T:LogViewer.Business.CCSMemoParserNew"/> or throw Exception if 
            cannot detect the format</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.GetCcsCsvParser(System.IO.StringReader)">
            <summary>
            Auto detect and return parser object depend on version of CCS file.
            </summary>
            <param name="reader">log data hold by StringReader object </param>
            <returns>Parser object, any of type: <see cref="T:LogViewer.Business.FileParser.CCSMemoParserOld"/>, <see cref="T:LogViewer.Business.CCSMemoParserNew"/> or throw Exception if 
            cannot detect the format</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.GetCxdiCsvLogParser(System.String)">
            <summary>
            Auto detect and return parser object for CXDI file.
            </summary>
            <param name="filePath">Location of file</param>
            <returns> <see cref="T:LogViewer.Business.FileParser.CXDIParser">CXDIParser</see> object, throw Exception if 
            cannot detect the format</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.GetCxdiMemoParser(System.String)">
            <summary>
            Auto detect and return parser object for CXDI memo file.
            </summary>
            <param name="filePath">Location of file</param>
            <returns> <see cref="T:LogViewer.Business.FileParser.CXDIMemoParser">CXDIMemoParser</see> object</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.ParserManager.DetectCcsVersion(System.String)">
            <summary>
            Detect version of ccs log file base one number of column in a log block
            </summary>
            <param name="filePath">path to the log file</param>
            <returns>ccs log version: CCSFileParserType.CCSVersion1 (for old version), 
            CCSFileParserType.CCSVersion2 (for new version),
            CCSFileParserType.UnknowVersion (cannot detect version)
            </returns>
        </member>
        <member name="T:LogViewer.Business.SortLogListManager`1">
            <summary>
            Class provides static methods for sorting log records.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.Business.SortLogListManager`1.SortAllRecord(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{`0}})">
            <summary>
            Sort all record in a dictionary, the comparative method base on date time. If the date time is the same, 
            Line will be use instead of.
            </summary>
            <param name="_allLogRecordsBufferWithFileName">Dictionary of log records</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.SortLogListManager`1.SortAllRecord(System.Collections.Generic.List{`0})">
            <summary>
            Sort all record in list, the comparative method base on date time. If the date time is the same, 
            Line will be use instead of.
            </summary>
            <param name="recordList">List of log records</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.Business.SortLogListManager`1.SortByFile(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{`0}})" -->
        <member name="M:LogViewer.Business.SortLogListManager`1.GetTheOldestLogFileRecord(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{`0}},System.Collections.Generic.List{System.String})">
            <summary>
            Get the oldest record list in the set of log file record when user load multi file
            </summary>
            <param name="_allLogRecordsBufferWithFileName">Dictionary of record </param>
            <param name="sortedFile"></param>
            <returns></returns>
        </member>
        <member name="T:LogViewer.ViewModel.FirmwareInfoTabViewModel">
            <summary>
            Class describing the firmware information of cxdi log.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.#ctor">
            <summary>
            Initializes a new instances of the FirmwareInfoTabViewModel class.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.ClearData">
            <summary>
            Clear data in firmware tab.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.FirmwareInfoTabViewModel._copyCommand">
            <summary>
            Get or set Command of event copy.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.IsEnableCopy">
            <summary>
            Check can execute copy
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.IsEnableCopyCounter">
            <summary>
            Check can execute copy counter
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.IsEnableCopySaved">
            <summary>
            Check can execute copy saved
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FirmwareInfoTabViewModel.CopyCommandCL">
            <summary>
            Function callback when click copy
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FirmwareInfoTabViewModel.CXDIFirmware">
            <summary>
            Get or set <see cref="P:LogViewer.ViewModel.FirmwareInfoTabViewModel.CXDIFirmware"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FirmwareInfoTabViewModel.SelectedItemsCounter">
            <summary>
            Get or set Selected item in counter firmware.
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FirmwareInfoTabViewModel.SelectedItemsSaved">
            <summary>
            Get or set Selected item in saved firmware.
            </summary>
        </member>
        <member name="T:LogViewer.Business.FilterItemSetting">
            <summary>
            Class provides method for containing filter parameter
            </summary>
        </member>
        <member name="T:LogViewer.Model.ILogItemSearch">
            <summary>
            Interface provide method for long item search
            </summary>
        </member>
        <member name="P:LogViewer.Model.ILogItemSearch.StringValue">
            <summary>
            Get or set string value of log item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ILogItemSearch.LogItem">
            <summary>
            Get or set name of log item
            </summary>
        </member>
        <member name="M:LogViewer.Business.FilterItemSetting.IsValidDate(System.Collections.Generic.List{System.String})">
            <summary>
            Validate for a filter item setting object have valid data or not.
            This method will valid on properties: Name and StringValue
            </summary>
            <param name="logHeader">List of system log header <see cref="!:BaseSettingManager.GetLogHeader()"/></param>
            <returns>True:valid, False: not valid</returns>
        </member>
        <member name="M:LogViewer.Business.FilterItemSetting.Copy">
            <summary>
            Clone to new object
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.PatternColor">
            <summary>
            Get or set pattern color
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.FontStyle">
            <summary>
            Get or set font style
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.Foreground">
            <summary>
            Get or set foreground
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.Background">
            <summary>
            Get or set background
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.IsPattern">
            <summary>
            Get or set is pattern for indicated that is not a filter object.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.StringValue">
            <summary>
            Get or set value for filter
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.LogItem">
            <summary>
            Get or set name of column for filtering on
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.index">
            <summary>
            Get or set index of filter item
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.listIndex">
            <summary>
            Get or set list of position that occurred filter value in string
            </summary>
        </member>
        <member name="P:LogViewer.Business.FilterItemSetting.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.JumpToLineViewModel">
            <summary>
            Class describing and processing for go to line.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToLineViewModel._message">
            <summary>
            Get or set error message.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToLineViewModel._line">
            <summary>
            Get or set line.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToLineViewModel.#ctor(System.Int32)">
            <summary>
            Initializes a new instances of the JumpToLineViewModel class.
            <param name="maximumLineNumber">Total line in grid</param>
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.JumpToLineViewModel._jumpToLineCommand">
            <summary>
            Get or set Command of button jump to line.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.JumpToLineViewModel.JumpToLineCommandCL">
            <summary>
            Function callback when button jump to line.
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.JumpToLineViewModel.OnJumpToLineNumberEvent">
            <summary>
            Action jump to line in grid by line.
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.JumpToLineViewModel.MaximumLineNumber">
            <summary>
            Total line in grid.
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CXDIMainViewModel">
            <summary>
            Class provides method for analyze CXDI log data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.#ctor(System.Object,LogViewer.Business.FileSetting.CXDISettingManager,System.Action{System.String,System.String},System.Action{System.String,System.Boolean})">
            <summary>
            Default constructor
            </summary>
            <param name="mainViewVM">Main model view</param>
            <param name="settingManager"><see cref="T:LogViewer.Business.FileSetting.CXDISettingManager"/></param>
            <param name="onFollowOtherLogEvent">Process for follow mode action</param>
            <param name="onRecentFileChange">Process for recent file change </param>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.LoadLogFileCL">
            <summary>
            Command for loading log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.LoadMemoLogFileCL">
            <summary>
            Command for loading memo log file
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.DragDropFile(LogViewer.MVVMHelper.DataGridDragDropEventArgs)">
            <summary>
            Command for drag and drop file
            </summary>
            <param name="args"><see cref="T:LogViewer.MVVMHelper.DataGridDragDropEventArgs"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.ShowGraphCommandCL">
            <summary>
            Command for showing graph
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.ApplyGraphSetting(System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting},LogViewer.Business.GraphResult@,LogViewer.Business.GraphResult@,System.Collections.Generic.IList{LogViewer.Business.GraphResult}@)">
            <summary>
            Apply graph setting after edit
            </summary>
            <param name="paramSetting"><see cref="T:LogViewer.Business.GraphParamSetting"/></param>
            <param name="graphLineData1"><see cref="T:LogViewer.Business.GraphResult"/> (line 1)</param>
            <param name="graphLineData2"><see cref="T:LogViewer.Business.GraphResult"/> (line 2)</param>
            <param name="eventResults"><see cref="T:LogViewer.Business.GraphResult"/> (event line)</param>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.LoadFirmware">
            <summary>
            Load firmware <seealso cref="T:LogViewer.Model.CXDIFirmware"/>
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.CreateEditFilterSettingVM(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})">
            <summary>
            Create view model for filtering setting
            </summary>
            <param name="onApplyEvent">Process for applying action</param>
            <returns><see cref="T:LogViewer.ViewModel.EditFilterSettingViewModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.GetExportFilePath">
            <summary>
            Get path for exporting file
            </summary>
            <returns>File name</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.ClearAllCommandCL">
            <summary>
            Command for clearing all processing data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.ClearAnalyzeCommandCL">
            <summary>
            Command for clearing analyzed result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.LoadConfig">
            <summary>
            Initialize for system parameter from setting file
            </summary>
            <returns>Empty string if had no error, otherwise is error message</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.StartAllAnalyzeProcess">
            <summary>
            Start all analyzing process background
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.InitLogItemList">
            <summary>
            Get item log from <see cref="P:LogViewer.Model.ConfigValue.CXDIHeader.AllLogField"/> in case there are no default one from setting file
            </summary>
            <returns>List of log display</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.ValidLogFileExtension(System.String)">
            <summary>
            Validate log file extension
            </summary>
            <param name="FilePath">File path</param>
            <returns>True: if valid, otherwise is False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.GetDefaultLogItem">
            <summary>
            Get default log header for message column
            </summary>
            <returns>Name of log header</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.CreateEditKeywordCountSettingVM(System.Action{System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting}})">
            <summary>
            Create view model for keyword count setting 
            </summary>
            <param name="onApply">Process for applying action</param>
            <returns><see cref="T:LogViewer.ViewModel.EditKeywordCountSettingViewModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.EditKeywordCountSettingCL">
            <summary>
            Command for editing keyword count
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.EditFilterSettingCL">
            <summary>
            Command for editing filtering
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.EditPatternSettingCL">
            <summary>
            Command for editing pattern
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIMainViewModel.contains(LogViewer.Model.CXDILogRecord,System.String)">
            <summary>
            Get sub string status of a string key with message column of <see cref="T:LogViewer.Model.CXDILogRecord"/>
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CXDILogRecord"/></param>
            <param name="key">A substring to be search</param>
            <returns>True: if the message column of log record contain given key, otherwise is false</returns>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.LogAnalyser">
            <summary>
            Get <see cref="!:CXDILogsAnalyze"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.SettingManager">
            <summary>
            Get <see cref="T:LogViewer.Business.FileSetting.CXDISettingManager"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.AnalyzeAreaVM">
            <summary>
            Get <see cref="T:LogViewer.ViewModel.CXDIAnalyzeAreaViewModel"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.OpenFileFilter">
            <summary>
            Get filtering pattern for opening file <see cref="P:LogViewer.Model.ConfigValue.CXDIFileFilter"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.OpenMemoFilterFile">
            <summary>
            Get filtering pattern for opening memo file <see cref="P:LogViewer.Model.ConfigValue.CXDIFileFilter"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIMainViewModel.ShowGraphCommand">
            <summary>
            Command interface for showing graph
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CCSLogsDisplayViewModel">
            <summary>
            Class provides method for displaying CCS log records
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseLogsDisplayViewModel`1">
            <summary>
            Base class provides common methods for display log file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LogViewer.ViewModel.ILogsDisplayContainer`1">
            <summary>
            Interface Log display container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.ViewModel.ILogsDisplayContainer`1.AddBookmark(`0)">
            <summary>
            Add bookmark
            </summary>
            <param name="data">Base log record</param>
        </member>
        <member name="M:LogViewer.ViewModel.ILogsDisplayContainer`1.RemoveBookmark(`0)">
            <summary>
            Remove bookmark
            </summary>
            <param name="data">Base log record</param>
        </member>
        <member name="P:LogViewer.ViewModel.ILogsDisplayContainer`1.CommentsDict">
            <summary>
            Dictionary comment of log
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.ILogsDisplayContainer`1.BookmarkList">
            <summary>
            Collection bookmark of log
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.ILogsDisplayContainer`1.FilterSetting">
            <summary>
            Collection filter setting of log
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.ILogsDisplayContainer`1.PatternColor">
            <summary>
            Pattern color of log
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.#ctor(System.Action{`0},System.Action{`0},System.Action{`0},System.Action{System.String,System.String},System.Action{`0,LogViewer.Model.AnalyzedPatternResultItem{`0}},LogViewer.Business.FileSetting.BaseSettingManager,System.Action{System.Object})" -->
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.Initialize(System.Collections.Generic.IList{`0},System.Collections.Generic.Dictionary{`0,System.String})">
            <summary>
            Initialize object after creating
            </summary>
            <param name="bookmarkList">List of record marked as bookmark</param>
            <param name="comments">Dictionary of comments</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.LoadData(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{LogViewer.Business.FilterItemSetting})">
            <summary>
            Load log records to display on data grid view
            </summary>
            <param name="data">List of log records</param>
            <param name="filters">List of filtering setting items</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.LoadFilterSetting(System.Collections.Generic.IList{LogViewer.Business.FilterItemSetting})">
            <summary>
            Load list of filtering setting items
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.RefreshItemsSource">
            <summary>
            Refresh record source
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.ClearData">
            <summary>
            Clear all data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.AddBookmark(`0)">
            <summary>
            Mark record T as bookmark
            </summary>
            <param name="data">Log record</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.RemoveBookmark(`0)">
            <summary>
            Remove record T from bookmark list
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.ShowRecord(`0)">
            <summary>
            Focus to a record
            </summary>
            <param name="record">Generic log record</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.ShowPatternColoringRecord(`0,LogViewer.Model.AnalyzedPatternResultItem{`0})">
            <summary>
            Focus to related record with record of pattern result
            </summary>
            <param name="record">Generic log record</param>
            <param name="CurrentPatternItem">Search pattern results</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.FollowRecord(`0)">
            <summary>
            Set follow record
            </summary>
            <param name="record">Generic log record</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.Expand">
            <summary>
            Increase height of rows
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.Shrink">
            <summary>
            De increase height of rows
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.CopyCommandCL">
            <summary>
            Command for copy records action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.IsEnableCopy">
            <summary>
            Get copying status
            </summary>
            <returns>True: allow copy, otherwise False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.OnOtherLogsLoadedHandler">
            <summary>
            Determine with side of log record list follow other
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.IsOnFollowMode">
            <summary>
            Get or set follow mode status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.ClickedRecord">
            <summary>
            Get or set clicked record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.FontOfDataGrid">
            <summary>
            Get or set font of data grid
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.ProcessTime">
            <summary>
            Get or set processing time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.SelectedItems">
            <summary>
            Get or set list of selected items
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.BaseRecordVMList">
            <summary>
            Get or set list of log records
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.RecordForJump">
            <summary>
            Get or set record for jump action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.RecordForFollow">
            <summary>
            Get or set record in follow mode
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.RefreshData">
            <summary>
            Get or set refresh data status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.FilterSetting">
            <summary>
            Get or set list of filtering setting items
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.PatternColor">
            <summary>
            Get or set pattern color
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogsDisplayViewModel`1.CopyCommand">
            <summary>
            Command interface for copy records action
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.CCSLogsDisplayViewModel.#ctor(System.Action{LogViewer.Model.CCSLogRecord},System.Action{LogViewer.Model.CCSLogRecord},System.Action{LogViewer.Model.CCSLogRecord},System.Action{System.String,System.String},System.Action{LogViewer.Model.CCSLogRecord,LogViewer.Model.AnalyzedPatternResultItem{LogViewer.Model.CCSLogRecord}},System.Collections.Generic.List{LogViewer.Model.LogDisplay},LogViewer.Business.FileSetting.BaseSettingManager,System.Action{System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.CCSLogsDisplayViewModel.CreateRecordVMFromData(LogViewer.Model.CCSLogRecord)" -->
        <member name="M:LogViewer.ViewModel.CCSLogsDisplayViewModel.CopyCommandCL">
            <summary>
            Command for copy action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.HeaderToShow">
            <summary>
            Get or header log header to show
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayBookmark">
            <summary>
            Get displaying bookmark status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayLine">
            <summary>
            Get displaying line status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayDate">
            <summary>
            Get displaying date status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayTime">
            <summary>
            Get displaying time status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayHostName">
            <summary>
            Get displaying host name status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayThreadID">
            <summary>
            Get displaying thread id status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayType">
            <summary>
            Get displaying type status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayID">
            <summary>
            Get displaying id status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayContent">
            <summary>
            Get displaying content status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayAdditionalInfo">
            <summary>
            Get displaying addition info status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayPersonalInfo">
            <summary>
            Get displaying personal info status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayClassName">
            <summary>
            Get displaying class name status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogsDisplayViewModel.IsDisplayComment">
            <summary>
            Get displaying comment status
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel">
            <summary>
            Class provides methods for listing pattern item keys
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseDataGridViewModel`1">
            <summary>
            Class for base data grid view model
            </summary>
            /// <typeparam name="T">The type of ViewModel.
            </typeparam>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._ownerVM">
            <summary>
            Parent view model of this class.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.#ctor(System.Object)">
            <summary>
            Initializes a new instances of the BaseApplyWindowViewModel class.
            </summary>
            <param name="ownerVM">Parent view model of this class.</param>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._rowForJump">
            <summary>
            Get or set Record is selected in grid.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._selectedItems">
            <summary>
            Get or set List item is selected in grid.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._errorMessage">
            <summary>
            Get or set error message for validate.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.ValidateData">
            <summary>
            abstract function validate data.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._sourceList">
            <summary>
            Get or set list source of grid.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._addCommand">
            <summary>
            Get or set Command of button add
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.AddCL">
            <summary>
            Function callback when click button add
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.CanAdd">
            <summary>
            Check can execute button add (enable or disable)
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.BaseDataGridViewModel`1._deleteCommand">
            <summary>
            Function callback when click button delete
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.DeleteCL">
            <summary>
            Function callback when click button delete
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.Delete(System.Collections.Generic.IList{System.Object})">
            <summary>
            Function delete a list item selected
            </summary>
            <param name="items">List item selected in grid</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.LoadData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Function Initializes source for grid.
            </summary>
            <param name="data">List record binding to grid</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseDataGridViewModel`1.CreateNewItem">
            <summary>
            Function abstract create a new instances for each type T 
            </summary>
            <Return>T</Return>
        </member>
        <member name="P:LogViewer.ViewModel.BaseDataGridViewModel`1.IsDataValid">
            <summary>
            function check data is valid or not.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="ownerVM">The owner view model, for examples: <see cref="T:LogViewer.ViewModel.PatternItemViewModel"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.ValidateData">
            <summary>
            Validate pattern key item list
            </summary>
            <returns>String empty if item key list is valid, otherwise return error message</returns>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.CreateNewItem">
            <summary>
            Create new key item
            </summary>
            <returns><see cref="T:LogViewer.Model.KeywordModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.AddCL">
            <summary>
            Add new keyword
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.Delete(System.Collections.Generic.IList{System.Object})">
            <summary>
            Delete list of specified keywords
            </summary>
            <param name="items">List of <see cref="T:LogViewer.Model.KeywordModel"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel.LoadData(System.Collections.Generic.IEnumerable{LogViewer.Model.KeywordModel})">
            <summary>
            Load keywords to <see cref="!:SourceList"/> 
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Model.KeywordModel"/></param>
        </member>
        <member name="T:LogViewer.MVVMHelper.IsDoubleRule">
            <summary>
            Class provide method for validation is double number
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.IsDoubleRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="value">Object to validate</param>
            <param name="cultureInfo"><see cref="T:System.Globalization.CultureInfo"/></param>
            <returns><see cref="T:System.Windows.Controls.ValidationResult"/></returns>
        </member>
        <member name="P:LogViewer.MVVMHelper.IsDoubleRule.Message">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="T:LogViewer.Business.CCSMemoParserNew">
            <summary>
            Class provides methods for parsing from or writing to an XML memo log file. This class support for CCS new version
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CCSParserNew">
            <summary>
            Class provides methods for extracting data from CCS log file. This class support for CCS new version
            </summary>
        </member>
        <member name="T:LogViewer.Business.BaseParser`1">
            <summary>
            Common base class for all type of parser class. Any parser class 
            (<see cref="T:LogViewer.Business.FileParser.CCSParserNew"/>, <see cref="T:LogViewer.Business.FileParser.CCSParserOld"/>, <see cref="T:LogViewer.Business.CCSMemoParserNew"/>, <see cref="T:LogViewer.Business.FileParser.CCSMemoParserOld"/>,
             <see cref="T:LogViewer.Business.FileParser.CXDIParser"/>, <see cref="T:LogViewer.Business.FileParser.CXDIMemoParser"/> or further other parser class) must be inherited this base class.
            </summary>
            <typeparam name="T">The type of record log file. 
            Type can be CCSLogRecord,  CXDILogRecord or any other log record that inherit from 
            BaseLogRecord class.
            </typeparam>
        </member>
        <member name="P:LogViewer.Business.BaseParser`1.LogRecords">
            <summary>
            Collection of log records that being parsing from log file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseParser`1.Comments">
            <summary>
            Dictionary of comments where key T are log records and values are user comments for the records T.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseParser`1.Bookmarks">
            <summary>
            Dictionary of bookmark where key T are log records that user will set as bookmark.
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileParser.CCSParserNew.ParserFromFile(System.String)">
            <summary>
            Parse CCS log file for CCS new version.
            </summary>
            <param name="filePath">The path of log file</param>
            <returns>This hold records of log file.
            </returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CCSParserNew.ParserFromFile(System.IO.StringReader)">
            <summary>
            Parse CCS log file for CCS new version.
            </summary>
            <param name="reader">String of log file hold by StringReader object</param>
            <returns>This hold records of log file.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.Business.CCSMemoParserNew.ParserFromFile(System.String)" -->
        <member name="M:LogViewer.Business.CCSMemoParserNew.WriteMemoLogFile(System.String)">
            <summary>
            Export log records, comments and bookmarks to memo long in an XML file.
            </summary>
            <param name="filePath">location of an XML file</param>
        </member>
        <member name="T:LogViewer.View.EditGraphParamSettingView">
            <summary>
            Interaction logic for EditGraphParamSettingView.xaml
            </summary>
            <summary>
            EditGraphParamSettingView
            </summary>
        </member>
        <member name="M:LogViewer.View.EditGraphParamSettingView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.DelegateCommand">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.#ctor(System.Action)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.CanExecute">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.Execute">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
                Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="E:LogViewer.MVVMHelper.DelegateCommand.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.DelegateCommand`1">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.CanExecute(`0)">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.Execute(`0)">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
                Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DelegateCommand`1.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="E:LogViewer.MVVMHelper.DelegateCommand`1.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.CommandManagerHelper">
            <summary>
                This class contains methods for the CommandManager that help avoid memory leaks by
                using weak references.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.CallWeakReferenceHandlers(System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Call Weak Reference Handlers 
            <param name="handlers"> Collection WeakRefecence</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.AddHandlersToRequerySuggested(System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Add handlers To Requery Suggested
            <param name="handlers"> Collection WeakRefecence</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.RemoveHandlersFromRequerySuggested(System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Remove Handlers From Requery Suggested
            <param name="handlers"> Collection WeakRefecence</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler)">
            <summary>
            Add Weak Reference Handler
            <param name="handlers"> Collection WeakRefecence</param>
            <param name="handler">Event handler</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler,System.Int32)">
            <summary>
            Add Weak Reference Handler
            <param name="handlers"> Collection WeakRefecence</param>
            <param name="handler">Event handler</param>
            <param name="defaultListSize">default Collection Size</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.CommandManagerHelper.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
            Remove Weak Reference Handler
            <param name="handlers"> Collection WeakRefecence</param>
            <param name="handler">Event handler</param>
            </summary>
        </member>
        <member name="T:LogViewer.Model.KeywordModel">
            <summary>
            Model class for storing keyword
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeywordModel.Value">
            <summary>
            Get or set keyword value
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeywordModel.Index">
            <summary>
            Get or set index of keyword
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CCSMainViewModel">
            <summary>
            Class provides method for analyze CCS log data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.#ctor(System.Object,LogViewer.Business.CCSSettingManager,System.Action{System.String,System.String},System.Action{System.String,System.Boolean})">
            <summary>
            Default constructor
            </summary>
            <param name="mainViewVM">Main model view</param>
            <param name="settingManager"><see cref="!:CXDISettingManager"/></param>
            <param name="onFollowOtherLogEvent">Process for follow mode action</param>
            <param name="onRecentFileChange">Process for recent file change </param>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.CreateEditFilterSettingVM(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})">
            <summary>
            Create view model of filtering setting
            </summary>
            <param name="onApply">Process for filtering action</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.GetExportFilePath">
            <summary>
            Get file path for exporting memo
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.InitLogItemList">
            <summary>
            Get item log from <see cref="P:LogViewer.Model.ConfigValue.CCSHeader.AllLogField"/> in case there are no default one from setting file
            </summary>
            <returns>List of log display</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.ValidLogFileExtension(System.String)">
            <summary>
            Validate log file extension
            </summary>
            <param name="FilePath">File path</param>
            <returns>True: if valid, otherwise is False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.ErrorActionCommandCL">
            <summary>
            Command for error action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.UserActionCommandCL">
            <summary>
            Command for user action
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.AnalyzeUserAction(System.Collections.Generic.IList{LogViewer.Model.UserActionItem})">
            <summary>
            Do analyze user action
            </summary>
            <param name="userActions"><see cref="T:LogViewer.Model.UserActionItem"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.StopUserActionWorker">
            <summary>
            Stop user action background worker if had nay stop action from user input
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.AnalyzeErrorAction(System.Collections.Generic.IList{LogViewer.Model.ErrorActionItem})">
            <summary>
            Analyze error action
            </summary>
            <param name="errorActions"><see cref="T:LogViewer.Model.ErrorActionItem"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.StopErrorActionWorker">
            <summary>
            Stop error action background worker if had any stop action from user input
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.StopAllAnalyProcess">
            <summary>
            Stop any analyze process
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.StartAllAnalyzeProcess">
            <summary>
            Start all analyze process
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.LoadConfig">
            <summary>
            Initialize for system parameter from setting file
            </summary>
            <returns>Empty string if had no error, otherwise is error message</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.ClearAllCommandCL">
            <summary>
            Command for stop and clear any result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.ClearAnalyzeCommandCL">
            <summary>
            Command for clearing analyzed result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.ClearWhenLoadFile">
            <summary>
            Stop any process and clear any display result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.GetDefaultLogItem">
            <summary>
            Get default log header for content column
            </summary>
            <returns>Name of log header</returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.CreateEditKeywordCountSettingVM(System.Action{System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting}})">
            <summary>
            Create view model for keyword count setting 
            </summary>
            <param name="onApply">Process for applying action</param>
            <returns><see cref="T:LogViewer.ViewModel.EditKeywordCountSettingViewModel"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.EditKeywordCountSettingCL">
            <summary>
            Command for editing keyword count
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.EditFilterSettingCL">
            <summary>
            Command for editing filtering
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.EditPatternSettingCL">
            <summary>
            Command for editing pattern
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSMainViewModel.contains(LogViewer.Model.CCSLogRecord,System.String)">
            <summary>
            Get sub string status of a string key with message column of <see cref="T:LogViewer.Model.CXDILogRecord"/>
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CXDILogRecord"/></param>
            <param name="key">A substring to be search</param>
            <returns>True: if the content column of log record contain given key, otherwise is false</returns>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.LogAnalyser">
            <summary>
            Get <see cref="T:LogViewer.Business.CCSLogsAnalyser"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.SettingManager">
            <summary>
            Get <see cref="T:LogViewer.Business.CCSSettingManager"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.AnalyzeAreaVM">
            <summary>
            Get <see cref="T:LogViewer.ViewModel.CCSAnalyzeAreaViewModel"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.OpenFileFilter">
            <summary>
            Get filtering pattern for opening file <see cref="P:LogViewer.Model.ConfigValue.CCSFileFilter"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.OpenMemoFilterFile">
            <summary>
            Get filtering pattern for opening memo file <see cref="P:LogViewer.Model.ConfigValue.MemoFilterFile"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.ErrorActionCommand">
            <summary>
            Command interface for error action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSMainViewModel.UserActionCommand">
            <summary>
            Command interface for user action
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditCCSKeywordCountSettingViewModel">
            <summary>
            Class provides methods for setting keyword count parameter item
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditKeywordCountSettingViewModel">
            <summary>
            Class provides methods for edit keyword count setting item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.Initialize">
            <summary>
            Initialize for after create new object
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.CreateNewAndSetCandidateDefaultValue">
            <summary>
            Create keyword count setting item with default value
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.DeleteItemSetting(System.Collections.Generic.IList{System.Object})">
            <summary>
            Delete keyword count setting item
            </summary>
            <param name="itemsToDelete">List item for deleting</param>
        </member>
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.OverwriteItemSettingCL">
            <summary>
            Command for overwritten setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.OnCandidateValueChange">
            <summary>
            Process when keyword count change value
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditKeywordCountSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default <see cref="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.LogItem"/>
            </summary>
            <returns>Name of default <see cref="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.LogItem"/></returns>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.StringValue">
            <summary>
            Get or set value of keyword count item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.LogItem">
            <summary>
            Get or set column name of log file
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.AllLogItems">
            <summary>
            Get all log item
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.DoubleClickedCandidate">
            <summary>
            Get or set <see cref="T:LogViewer.Business.KeywordCountItemSetting"/> for double click action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.IsValidAllInputPropOverwrite">
            <summary>
            Get status of validation of all input
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditKeywordCountSettingViewModel.OverwriteItemSettingCommand">
            <summary>
            Command interface for overwritten setting item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditCCSKeywordCountSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditCCSKeywordCountSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default log item
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.EditCCSKeywordCountSettingViewModel.AllLogItems">
            <summary>
            Get all default log items
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.FontSizeConverter">
            <summary>
            Class convert number to Font size
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.FontSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return a int font size</returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.BindingProxy">
            <summary>
            A proxy binding parent data.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.BindingProxy.DataProperty">
            <summary>
            Dependency property for data proxy property.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.BindingProxy.Data">
            <summary>
            The value to match against the input value.
            </summary>
        </member>
        <member name="T:LogViewer.Model.AnalyzedErrorActionItem">
            <summary>
            Model class for storing analyzed result item.
            </summary>
        </member>
        <member name="M:LogViewer.Model.AnalyzedErrorActionItem.#ctor(LogViewer.Model.ErrorActionItem,LogViewer.Model.CCSLogRecord)">
            <summary>
            Default constructor.
            </summary>
            <param name="error"><see cref="T:LogViewer.Model.ErrorActionItem"/></param>
            <param name="record"></param>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.Record">
            <summary>
            Get or set <see cref="T:LogViewer.Model.CCSLogRecord"/>log record
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.Line">
            <summary>
            Get or set line
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.Date">
            <summary>
            Get or set date
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.Time">
            <summary>
            Get or set time
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.LogType">
            <summary>
            Get or set log type (error level)
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.ErrorCode">
            <summary>
            Get or set error code
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedErrorActionItem.Message">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileSetting.UserSettingFileException">
            <summary>
            Class provides methods for throwing exception in case of setting file exception. This class had no parameter in contructor
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.UserSettingFileException.#ctor">
            <summary>
            Default parameter
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.UserSettingFileException.#ctor(System.String)">
            <summary>
            Used for throw exception in case of setting file exception.
            </summary>
            <param name="message">Exception information</param>
        </member>
        <member name="M:LogViewer.Business.FileSetting.UserSettingFileException.#ctor(System.String,System.Exception)">
            <summary>
            Used for throw exception in case of setting file exception.
            </summary>
            <param name="message">Exception information</param>
            <param name="inner">Parent<see cref="T:System.Exception">Exception</see></param>
        </member>
        <member name="T:LogViewer.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:LogViewer.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:LogViewer.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:LogViewer.View.LoadingDialog">
            <summary>
            Interaction logic for LoadingDialog.xaml
            </summary>
            <summary>
            LoadingDialog
            </summary>
        </member>
        <member name="M:LogViewer.View.LoadingDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.SaveFileDialogViewModel">
            <summary>
            Class provides method for save file dialog
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.SaveFile.ISaveFileDialog">
            <summary>
            Interface provides overwrite methods for SaveFileDialog
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.ISaveFileDialog.FileName">
            <summary>
            Get or set file name
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.ISaveFileDialog.DefaultExt">
            <summary>
            Get or set default file extension
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.ISaveFileDialog.Filter">
            <summary>
            Get or set filter string
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SaveFileDialogViewModel.ShowDialog(System.Object)">
            <summary>
            Show dialog
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>OK or Cancel</returns>
        </member>
        <member name="P:LogViewer.ViewModel.SaveFileDialogViewModel.FileName">
            <summary>
            File name 
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SaveFileDialogViewModel.DefaultExt">
            <summary>
            Default extension
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SaveFileDialogViewModel.Filter">
            <summary>
            Filter 
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.MainViewModel">
            <summary>
            Class process main function in area of CCS and CXDI
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._searchVM">
            <summary>
            Get SearchKeywordViewModel <see cref="T:LogViewer.ViewModel.SearchKeywordViewModel"/>
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.#ctor">
            <summary>
            Initializes a new instance of the MainViewModel class.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.Init">
            <summary>
            Initialize data to CCSMain and CXDIMain
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.CXDIShowRecordWithDateTime(System.String,System.String)">
            <summary>
            CXDI show record with date time
            </summary>
            <param name="date">Date to follow</param>
            <param name="time">Time to follow</param>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.CCSShowRecordWithDateTime(System.String,System.String)">
            <summary>
            CCS Show record with date time
            </summary>
            <param name="date">Date to follow</param>
            <param name="time">Time to follow</param>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._recentFile">
            <summary>
            Get or set Recent File
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._recentFileAction">
            <summary>
            Get or set RecentFileAction
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._ccsMainVM">
            <summary>
            Get or set CCSMain ViewModel
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._cxdiMainVM">
            <summary>
            Get or set CXDI Main ViewModel
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._isOnFollowModeCCS">
            <summary>
            Get or set Is On follow mode CCS
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._isOnFollowModeCXDI">
            <summary>
            Get or set Is On Follow Mode CXDI
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._searchKeywordCommand">
            <summary>
            Get or set command for menu item Search keyword
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.SearchKeywordCommandCL">
            <summary>
            Search keyword function run when click button search in Search Keyword window
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.RecentFileChange(System.String,System.Boolean)">
            <summary>
            Recent File Change
            </summary>
            <param name="recentFile">File path</param>
            <param name="flag">Status when add to recent list. True add, false not add</param>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.LoadConfig">
            <summary>
            Load configuration file when start application
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.SearchCCS(LogViewer.Model.SearchItem)">
            <summary>
            Get List record when search CCS for search condition
            </summary>
            <param name="searchCondition">Search condition for CCS</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.SearchCXDI(LogViewer.Model.SearchItem)">
            <summary>
            Get List record when search CXDI for search condition
            </summary>
            <param name="searchCondition">Search condition for CXDI</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ShowCCSRecord(LogViewer.Model.CCSLogRecord)">
            <summary>
            Scroll to CCS record with record
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CCSLogRecord"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ShowCXDIRecord(LogViewer.Model.CXDILogRecord)">
            <summary>
            Scroll to CXDI record with record
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CXDILogRecord"/></param>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._setLogParameterCommand">
            <summary>
            Get or set Command of menu item Set log parameter.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.SetLogParameterCommandCL">
            <summary>
            Function Show SetLogParameter Window
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ApplyLogDisplay(System.Collections.Generic.List{System.Collections.Generic.List{LogViewer.Model.LogDisplay}})">
            <summary>
            Function run when click button Apply in SetLogParameter window
            </summary>
            <param name="data">List LogDisplay condition</param>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._expandCommand">
            <summary>
            Get or set Command of menu item Expand.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ExpandCommandCL">
            <summary>
            Run when click menu item Expand
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._shrinkCommand">
            <summary>
            Get or set Command of menu item Shrink.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ShrinkCommandCL">
            <summary>
            Run when click menu item Shrink
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.IsEnableButton">
            <summary>
            Check can execute menu item
            </summary>
            <returns></returns>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._resetBookmarkCommand">
            <summary>
            Get or set Command of menu item Reset bookmark.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ResetBookmarkCommandCL">
            <summary>
            Run when click menu item ResetBookmark.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._resetCommentCommand">
            <summary>
            Get or set Command of menu item Reset comment.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ResetCommentCommandCL">
            <summary>
            Run when click menu item ResetComment.
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._clearAllCommand">
            <summary>
            Get or set Command of menu item Clear all.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ClearAllCommandCL">
            <summary>
            Run when click menu item ClearAll
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._clearAnalyzeCommand">
            <summary>
            Get or set Command of menu item Clear analyze.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ClearAnalyzeCommandCL">
            <summary>
            Run when click menu item ClearAnalyze
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._clearColorFilterSettingCommand">
            <summary>
            Get or set Command of menu item Clear color filter.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ClearColorFilterSettingCommandCL">
            <summary>
            Run when click menu item ClearColorFilter
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.MainViewModel._resetFilterCommand">
            <summary>
            Get or set Command of menu item Reset filter.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MainViewModel.ResetFilterCommandCL">
            <summary>
            Run when click menu item ResetFilter
            </summary>
        </member>
        <member name="T:LogViewer.Model.CCSLogRecord">
            <summary>
            Model class for storing CCS log record information.
            </summary>
        </member>
        <member name="T:LogViewer.Model.BaseLogRecord">
            <summary>
            Model class for base log record
            </summary>
        </member>
        <member name="P:LogViewer.Model.BaseLogRecord.Line">
            <summary>
            Get or set line number
            </summary>
        </member>
        <member name="P:LogViewer.Model.BaseLogRecord.DateTime">
            <summary>
            Get or set date time of log record
            </summary>
        </member>
        <member name="P:LogViewer.Model.BaseLogRecord.Date">
            <summary>
            Get date
            </summary>
        </member>
        <member name="P:LogViewer.Model.BaseLogRecord.Time">
            <summary>
            Get time
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.HostName">
            <summary>
            Get or set host name
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.ThreadId">
            <summary>
            Get or set thread id
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.Type">
            <summary>
            Get or set type
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.Id">
            <summary>
            Get or set id
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.Content">
            <summary>
            Get or set content data
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.AdditionalInfo">
            <summary>
            Get or set addition information
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.PersonalInfo">
            <summary>
            Get or set personal information
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.ClassName">
            <summary>
            Get or set class name
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.Module">
            <summary>
            Get or set module
            </summary>
        </member>
        <member name="P:LogViewer.Model.CCSLogRecord.Mode">
            <summary>
            Get or set mode
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.ParameterDataGridViewModel">
            <summary>
            Class provides method for graph parameter setting item
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseGraphParameterDataGridViewModel">
            <summary>
            Abstract class provides common methods for validate graph parameter setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseGraphParameterDataGridViewModel.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="ownerVM">The owner view model, for examples: <see cref="T:LogViewer.ViewModel.EditGraphParamSettingViewModel"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseGraphParameterDataGridViewModel.CanAdd">
            <summary>
            Use for checking can the parameter data grid view model can applying or not
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseGraphParameterDataGridViewModel.ValidateData">
            <summary>
            Validate graph parameter setting item
            </summary>
            <returns>Error message if the inputed item is invalid, otherwise this method return an empty string</returns>
        </member>
        <member name="M:LogViewer.ViewModel.ParameterDataGridViewModel.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="ownerVM">The owner view model, for examples: <see cref="T:LogViewer.ViewModel.EditGraphParamSettingViewModel"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.ParameterDataGridViewModel.ValidateData">
            <summary>
            Validate graph parameter setting item
            </summary>
            <returns>Error message if the inputed item is invalid, otherwise this method return an empty string</returns>
        </member>
        <member name="M:LogViewer.ViewModel.ParameterDataGridViewModel.CreateNewItem">
            <summary>
            Create new parameter item
            </summary>
            <returns><see cref="T:LogViewer.Business.GraphParamSetting"/></returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.ProtobyteToDrawingConverter">
            <summary>
            Class register parameter of graph in CXDI log
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.ProtobyteToDrawingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to prototype
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return a boolean value</returns>
            <returns>Prototype enum</returns>
        </member>
        <member name="T:LogViewer.MVVMHelper.FractionToDoubleConverter">
            <summary>
            Class convert fraction to double
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.FractionToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return double value</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.FractionToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return fraction value, return null if not valid</returns>
        </member>
        <member name="T:LogViewer.Model.CXDIFirmware">
            <summary>
            Model class for storing information of CXDI firmware
            </summary>
        </member>
        <member name="M:LogViewer.Model.CXDIFirmware.#ctor">
            <summary>
            Default constructor initialize for <see cref="P:LogViewer.Model.CXDIFirmware.Counter"/> and <see cref="P:LogViewer.Model.CXDIFirmware.Saved"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.CXDIFirmware.Counter">
            <summary>
            Get or set list of <see cref="P:LogViewer.Model.CXDIFirmware.Counter"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.CXDIFirmware.Saved">
            <summary>
            Get or set list of <see cref="P:LogViewer.Model.CXDIFirmware.Saved"/>
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue">
            <summary>
            
            Class provide statics properties and methods as application configure
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.MaxStringLength">
            <summary>
            Define max string length
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.COUNTER_PARAMETER">
            <summary>
            Definition for counter parameter
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.SAVE_PARAMETER">
            <summary>
            Definition for saved parameter
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.MESSAGE_ERROR_LOG">
            <summary>
            Definition for error parameter
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.END_COUNTER_PARAMETER">
            <summary>
            Definition for end counter parameter
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.MESSAGE_LOG">
            <summary>
            Definition for message log
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ConfigFolder">
            <summary>
            Get configure folder path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ActionListFolder">
            <summary>
            Get action folder path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCCSLogSettingFile">
            <summary>
            Get user CCS log setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCXDILogSettingFile">
            <summary>
            Get user CXDI log setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCCSFilteringSettingFile">
            <summary>
            Get user CCS filter setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCXDIFilteringSettingFile">
            <summary>
            Get user CXDI filter setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCCSKeywordSettingFile">
            <summary>
            Get user CCS keyword setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCXDIKeywordSettingFile">
            <summary>
            Get user CXDI keyword setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCCSPatternSettingFile">
            <summary>
            Get user CCS pattern setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserCXDIPatternSettingFile">
            <summary>
            Get user CXDI pattern setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserGraphParamSettingFile">
            <summary>
            Get user CXDI graph parameter setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCCSFilteringSettingFile">
            <summary>
            Get default CCS filter setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCXDIFilteringSettingFile">
            <summary>
            Get default CXDI filter setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCCSKeywordSettingFile">
            <summary>
            Get default CCS keyword count setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCXDIKeywordSettingFile">
            <summary>
            Get default CXDI keyword count setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCCSLogSettingFile">
            <summary>
            Get default CCS log setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCXDILogSettingFile">
            <summary>
            Get default CXDI log setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCCSPatternSettingFile">
            <summary>
            Get default CCS pattern setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultCXDIPatternSettingFile">
            <summary>
            Get default CXDI pattern setting file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.UserActionList">
            <summary>
            Get user action list file path
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ErrorActionList">
            <summary>
            Get error action list file path
            </summary>
        </member>
        <member name="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting">
            <summary>
            Build list default value for CCS display log setting
            </summary>
            <returns>List of LogDisPlaySetting</returns>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.Is1stTimeSetFirstYRange">
            <summary>
            Defined for the first axis Y is set
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.Is1stTimeSetSecondYRange">
            <summary>
            Defined for the second axis Y is set
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.Is1stTimeSetDateRange">
            <summary>
            Defined for the date range is set
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.GraphRangeSettingValue">
            <summary>
            Get <see cref="T:LogViewer.Business.GraphRangeSetting"/>
            </summary>
        </member>
        <member name="M:LogViewer.Model.ConfigValue.SystemCXDILogSetting">
            <summary>
            Build list default value for CXDI display log setting
            </summary>
            <returns>List of column to displayed on data grid</returns>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.DefaultMemoFolderPath">
            <summary>
            Get default path for memo file
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSMemoFileNameFormat">
            <summary>
            Get Definition of CCS memo file name format
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CXDIMemoFileNameFormat">
            <summary>
            Get Definition of CXDI memo file name format
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.SensorInitTime">
            <summary>
            Definition for error year in CXDI log file
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.SEARCH_KEY_OR">
            <summary>
            Definition for OR operation keyword for pattern filtering
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.SEARCH_KEY_AND">
            <summary>
            Definition for AND operation keyword for pattern filtering
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphImageFileName">
            <summary>
            Definition file name for exporting graph to image
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphImageFileExtension">
            <summary>
            Definition extension file for exporting graph
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphImageFileFilter">
            <summary>
            Definition extension file filtering for exporting graph
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphCSVResultFileName">
            <summary>
            Definition file name for exporting graph to CSV
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphCSVResultFileExtension">
            <summary>
            Definition extension file for exporting graph to CSV
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.ExportedGraphCSVResultFileFilter">
            <summary>
            Definition extension file filtering for exporting graph to CSV
            </summary>
        </member>
        <member name="M:LogViewer.Model.ConfigValue.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.listColor">
            <summary>
            Definition for used color in pattern highlight
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.LimitFilterItem">
            <summary>
            Limit filter item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.NoneColorFilterItem">
            <summary>
            Get <see cref="T:LogViewer.Business.FilterItemSetting"/> for none color filter item case
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultColorFilterItem">
            <summary>
            Get <see cref="T:LogViewer.Business.FilterItemSetting"/> for default color filter item case
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultPatternItem">
            <summary>
            Get <see cref="T:LogViewer.Business.FilterItemSetting"/> for default pattern
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultFontSize">
            <summary>
            Get default font size
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DeltaFontSize">
            <summary>
            Get delta font size
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.MinimunFontSize">
            <summary>
            Get minimum font size
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.MaximunFontSize">
            <summary>
            Get maximum font size
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.CCSFileFilter">
            <summary>
            Get CCS file filter string
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.CXDIFileFilter">
            <summary>
            Get CXDI file filter string
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.MemoFilterFile">
            <summary>
            Get memo file filter string
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultFilterItemBackgroundColor">
            <summary>
            Get background color for default filter item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultFilterItemForegroundColor">
            <summary>
            Get foreground color for default filter item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.DefaultFilterItemFontStyle">
            <summary>
            Get font style for default filter item
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.TxtExtension">
            <summary>
            Get TXT extension
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.CsvExtension">
            <summary>
            Get CSV extension
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.LogExtension">
            <summary>
            Get log extension
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.BaseLogHeader">
            <summary>
            Static class for Definition base log header info
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.BaseLogHeader.HEADER_BOOKMARK">
            <summary>
            Bookmark header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.BaseLogHeader.HEADER_LINE">
            <summary>
            Line header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.BaseLogHeader.HEADER_DATE">
            <summary>
            Date header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.BaseLogHeader.HEADER_TIME">
            <summary>
            Time header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.BaseLogHeader.HEADER_FILENAME">
            <summary>
            File name header
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.CCSHeader">
            <summary>
            Static class for Definition CCS log header info
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_HOSTNAME">
            <summary>
            Host name header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_THREADID">
            <summary>
            Thread id header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_TYPE">
            <summary>
            Type header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_CONTENT">
            <summary>
            Content header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_ID">
            <summary>
            Id header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_ADDITIONINFO">
            <summary>
            Addition info header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_PERSONALINFO">
            <summary>
            Personal info header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_CLASSNAME">
            <summary>
            Class name header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_COMMENT">
            <summary>
            Comment header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_MODE">
            <summary>
            Mode header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_ERRORMESSAGE">
            <summary>
            Error message header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_ERRORRECIPE">
            <summary>
            Error recipe header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_USERACTION">
            <summary>
            User action header
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.CCSHeader.HEADER_ERRORCODE">
            <summary>
            Error code header
            </summary>
        </member>
        <member name="M:LogViewer.Model.ConfigValue.CCSHeader.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.CCSHeader.AllLogField">
            <summary>
            Get all header
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.CXDIHeader">
            <summary>
            Static class for Definition CXDI log header info
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.LogKindTarget">
            <summary>
            Static class provides Definitions for log type when searching
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.LogKindTarget.CCS">
            <summary>
            Is CCS log type
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.LogKindTarget.CXDI">
            <summary>
            Is CXDI log type
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.LogKindTarget.CCS_CXDI">
            <summary>
            Is CXDI and CCS log type
            </summary>
        </member>
        <member name="M:LogViewer.Model.ConfigValue.LogKindTarget.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.LogKindTarget.AllLogKindTarget">
            <summary>
            Get all log type
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.FilterSettingFontStyles">
            <summary>
            Static class for font style Definition
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.FilterSettingFontStyles.NORMAL">
            <summary>
            Get normal font type
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.FilterSettingFontStyles.BOLD">
            <summary>
            Get bold font type
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.FilterSettingFontStyles.ITALIC">
            <summary>
            Get italic font style
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.FilterSettingFontStyles.BOLDITALIC">
            <summary>
            Get bold and italic font type
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.FilterSettingFontStyles.AllFontStyle">
            <summary>
            Get all font styles
            </summary>
        </member>
        <member name="T:LogViewer.Model.ConfigValue.TimeUnits">
            <summary>
            Static class for time unit Definition
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.TimeUnits.H">
            <summary>
            Get hour symbol
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.TimeUnits.M">
            <summary>
            Get minute
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.TimeUnits.S">
            <summary>
            Get second
            </summary>
        </member>
        <member name="F:LogViewer.Model.ConfigValue.TimeUnits.MS">
            <summary>
            Get millisecond
            </summary>
        </member>
        <member name="P:LogViewer.Model.ConfigValue.TimeUnits.AllTimeUnit">
            <summary>
            Get all time units
            </summary>
        </member>
        <member name="T:LogViewer.Business.CCSSettingManager">
            <summary>
            Class provides methods for manager CCS setting file
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileSetting.BaseSettingManager">
            <summary>
            Base Class provides common method for process file setting
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileSetting.BaseSettingManager.CurrentLogDisplayFileType">
            <summary>
            Store current status of log display setting file <see cref="T:LogViewer.Business.FileSetting.EnumSettingFileType">type</see>.The set by <seealso cref="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseLogDisplaySettingFilePath"/>.
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileSetting.BaseSettingManager.CurrentPatternFileType">
            <summary>
            Store current status of pattern setting file <see cref="T:LogViewer.Business.FileSetting.EnumSettingFileType">type</see>.The set by <seealso cref="P:LogViewer.Business.FileSetting.BaseSettingManager.BasePatternSettingFilePath"/>.
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileSetting.BaseSettingManager.CurrentFilterSettingFileType">
            <summary>
            Store current status of filter setting file <see cref="T:LogViewer.Business.FileSetting.EnumSettingFileType">type</see>.The set by <seealso cref="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseFilterSettingFilePath"/>.
            </summary>
        </member>
        <member name="F:LogViewer.Business.FileSetting.BaseSettingManager.CurrentKeywordCountFileType">
            <summary>
            Store current status of keyword count setting file <see cref="T:LogViewer.Business.FileSetting.EnumSettingFileType">type</see>.The set by <seealso cref="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseKeywordCountSettingFilePath"/>.
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.InitSystemLogDisplaySetting">
            <summary>
            Initial log display setting if user or default log display setting file is not exists
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.CreateDefaultAppFolder">
            <summary>
            Create default folder if its are not existed. Tow default folder will be create inside application path are: FileConfig and ActionList
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.SetKeywordCountSettingList(System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting})">
            <summary>
            Set the list <see cref="T:LogViewer.Business.KeywordCountItemSetting"/>
            </summary>
            <param name="data">List of <see cref="T:LogViewer.Business.KeywordCountItemSetting"/>, the list is collected by from user input of from setting file.
            </param>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.ReadDisplaySetting">
            <summary>
            Read log display setting file, depend on current context of setting file. 
            Display setting file can be: UserCCSLogSetting.csv/UserCXDILogSetting.csv, DefaultCCSLogSetting.csv/DefaultCXDILogSetting.csv or 
            <see cref="M:LogViewer.Business.FileSetting.BaseSettingManager.InitSystemLogDisplaySetting"/>. 
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.ReadDisplaySetting(System.String)">
            <summary>
            Read log display setting file, depend on current context of setting file. 
            Display setting file can be: UserCCSLogSetting.csv/UserCXDILogSetting.csv, DefaultCCSLogSetting.csv/DefaultCXDILogSetting.csv or 
            </summary>
            <param name="filePath">Location of display setting file</param>
            <returns>List of display setting object <see cref="T:LogViewer.Model.LogDisplay"/></returns>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.IsValidLogDisplay(System.Collections.Generic.List{LogViewer.Model.LogDisplay})">
            <summary>
            Check validation for list of log display setting item
            </summary>
            <param name="displaySetting">List of display setting item, see <see cref="T:LogViewer.Model.LogDisplay"/> for more infomation</param>
            <returns>True: if log display setting item is valid, otherwise is False. The log display item setting list is valid when 
            <see cref="T:LogViewer.Model.LogDisplay"/> name match with <see cref="T:LogViewer.Model.LogDisplay"/> defined in <see cref="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting"/> 
            or <see cref="M:LogViewer.Model.ConfigValue.SystemCXDILogSetting"/> 
            </returns>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.GetSystemConfig">
            <summary>
            Get list of log display setting item that defined in <see cref="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting"/> or <see cref="M:LogViewer.Model.ConfigValue.SystemCXDILogSetting"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.WriteDisplaySetting">
            <summary>
            Write log display setting file to user log display setting file(UserCCSLogSetting.csv,UserCXDILogSetting.csv). File type is csv
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.ReadKeywordCountSettingFile">
            <summary>
            Read keyword count setting file, depend on current context of setting file. 
            Keyword count setting file can be: UserCCSKeywordSetting.csv/UserCXDIKeywordSetting.csv, DefaultCCSKeywordSetting.csv/DefaultCXDIKeywordSetting.csv 
            or empty list. 
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.WriteKeywordCountSettingFile">
            <summary>
            Write to user keyword count setting file(UserCCSKeywordSetting.csv/UserCXDIKeywordSetting.csv)
            <exception cref="T:System.Exception">IO Exception must be catch</exception>
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.ReadPattermSetting">
            <summary>
            Read File pattern setting. File type is XML
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.WritePattermSetting">
            <summary>
            Write Pattern setting to file xml file. The file will be writen as user setting file
            </summary>
            <exception cref="T:System.Exception">IO Exception must be catch</exception>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.ReadFilterSetting">
            <summary>
            Read filter setting file, depend on current context of setting file. 
            Filter setting file can be: UserCCSFilteringSetting.csv/UserCXDIFilteringSetting.csv, DefaultCCSFilteringSetting.csv/DefaultCXDIFilteringSetting.csv 
            or empty list. 
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.GetLogHeader">
            <summary>
            Get list of column name of log file. The column list defend on which class inherited this class
            </summary>
            <returns>List of column name of log file</returns>
        </member>
        <member name="M:LogViewer.Business.FileSetting.BaseSettingManager.WriteFilterSetting">
            <summary>
            Write to filter setting file. This action will write to user filter setting file. 
            Filter setting file can be: UserCCSFilteringSetting.csv, UserCXDIFilteringSetting.csv
            </summary>
            <exception cref="T:System.Exception">IO Exception must be catch</exception>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.BasePatternSettingFilePath">
            <summary>
            Get path of user pattern setting file, if the path is not exists the default pattern setting file will be use, 
            if the default pattern setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.UserPatternSettingFilePath">
            <summary>
            Get or set the path of user pattern setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.DefaultPatternSettingFilePath">
            <summary>
            Get the path of default pattern setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseFilterSettingFilePath">
            <summary>
            Get path of user filter setting file, if the path is not exists the default filter setting file will be use, 
            if the default filter setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.UserFilterSettingFilePath">
            <summary>
            Get or set the path of user filter setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.DefaultFilterSettingFilePath">
            <summary>
            Get or set the path of default filter setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseKeywordCountSettingFilePath">
            <summary>
            Get path of user keyword count setting file, if the path is not exists the default keyword count setting file will be use, 
            if the default keyword count setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.UserKeywordCountSettingFilePath">
            <summary>
            Get or set the path of user keyword count setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.DefaultKeywordCountSettingFilePath">
            <summary>
            Get or set the path of default keyword count setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.BaseLogDisplaySettingFilePath">
            <summary>
            Get path of user log display setting file, if the path is not exists the default log display setting file will be use, 
            if the default log display setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.UserLogDisplaySettingFilePath">
            <summary>
            Get or set the path of user log display setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.DefaultLogDisplaySettingFilePath">
            <summary>
            Get or set the path of default log display setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.KeywordCountSettingList">
            <summary>
            Get or set the list of <see cref="T:LogViewer.Business.KeywordCountItemSetting"/> objects.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.PatternSettingList">
            <summary>
            Get or set the list of <see cref="T:LogViewer.Business.PatternItemSetting"/> objects.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.ColorFilterSettingList">
            <summary>
            Get or set the list of <see cref="T:LogViewer.Business.FilterItemSetting"/> objects.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.DisplaySetting">
            <summary>
            Get or set the list of <see cref="T:LogViewer.Model.LogDisplay"/> objects.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.NarrowFilterSettingItem">
            <summary>
            Get or set <see cref="T:LogViewer.Business.FilterItemSetting"/> object.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.BaseSettingManager.AllEnabledColorFilters">
            <summary>
            Get the list of enabled <see cref="T:LogViewer.Business.FilterItemSetting"/> objects.
            </summary>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.#ctor">
            <summary>
            Constructor for CCSSettingManager
            </summary>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.ReadErrorActionSetting">
            <summary>
            Read information from the error action setting file setting. 
            The error action setting will be store to ErrorActionSettingList properties
            </summary>
            <exception cref="T:System.Exception">IO Exception must be catch</exception>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.ReadUserActionSetting">
            <summary>
            Read information from the user action setting file setting. 
            The user action setting will be store to ErrorActionSettingList properties
            </summary>
            <exception cref="T:System.Exception">IO Exception must be catch</exception>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.InitSystemLogDisplaySetting">
            <summary>
            Initialize for log display settings, the list of display setting is got from <see cref="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.GetSystemConfig">
            <summary>
            Get log display settings, the list of display setting is got from <see cref="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.CCSSettingManager.GetLogHeader">
            <summary>
            Get log header list for CCS log file, the list of log header is got from <see cref="P:LogViewer.Model.ConfigValue.CCSHeader.AllLogField"/>
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.ErrorActionSettingList">
            <summary>
            Properties for retrieval list of <see cref="T:LogViewer.Model.ErrorActionItem">ErrorActionItem</see>
            when call <see cref="M:LogViewer.Business.CCSSettingManager.ReadErrorActionSetting">ReadErrorActionSetting</see>
            <see cref="M:LogViewer.Business.CCSSettingManager.ReadErrorActionSetting">ReadErrorActionSetting</see>
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserActionSettingList">
            <summary>
            Properties for retrieval list of <see cref="T:LogViewer.Model.UserActionItem">UserActionItem</see>
            when call <see cref="M:LogViewer.Business.CCSSettingManager.ReadUserActionSetting">ReadUserActionSetting</see>
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.ErrorActionSettingFilePath">
            <summary>
            Return the full user path of error action setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserActionSettingFilePath">
            <summary>
            Return the full user path of error action setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.BasePatternSettingFilePath">
            <summary>
            Get path of user pattern setting file, if the path is not exists the default pattern setting file will be use, 
            if the default pattern setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserPatternSettingFilePath">
            <summary>
            Get or set the path of user pattern setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.BaseFilterSettingFilePath">
            <summary>
            Get path of user filter setting file, if the path is not exists the default filter setting file will be use, 
            if the default filter setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserFilterSettingFilePath">
            <summary>
            Get or set the path of user filter setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.BaseKeywordCountSettingFilePath">
            <summary>
            Get path of user keyword count setting file, if the path is not exists the default keyword count setting file will be use, 
            if the default keyword count setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserKeywordCountSettingFilePath">
            <summary>
            Get or set the path of user keyword count setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.BaseLogDisplaySettingFilePath">
            <summary>
            Get path of user log display setting file, if the path is not exists the default log display setting file will be use, 
            if the default log display setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.UserLogDisplaySettingFilePath">
            <summary>
            Get or set the path of user log display setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.DefaultLogDisplaySettingFilePath">
            <summary>
            Initial log display setting if user or default log display setting file is not exists
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.DefaultPatternSettingFilePath">
            <summary>
            Get the path of default pattern setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.DefaultFilterSettingFilePath">
            <summary>
            Get the path of default filter setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSSettingManager.DefaultKeywordCountSettingFilePath">
            <summary>
            Get the path of default keyword count setting file
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CCSParserOld">
            <summary>
            Class provides methods for extracting data from CCS log file. This class support for CCS old version
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileParser.CCSParserOld.ParserFromFile(System.String)">
            <summary>
            Parse CCS log file for CCS old version.
            </summary>
            <param name="filePath">The path of log file</param>
            <returns>This hold records of log file
            </returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CCSParserOld.ParserFromFile(System.IO.StringReader)">
            <summary>
            Parse CCS log file for CCS old version.
            </summary>
            <param name="reader">String of log file hold by StringReader object</param>
            <returns>This hold records of log file.
            </returns>
        </member>
        <member name="T:LogViewer.Model.Prototype">
            <summary>
            Enum array for definition prototype of graph item.
            <seealso cref="!:GraphParamSetting"/>
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileSetting.EnumSettingFileType">
            <summary>
            Enum array for definition setting files type: UserFile,DefaultFile,SystemFile
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CXDILogsDisplayViewModel">
            <summary>
            Class provides method for displaying CXDI log record to data gridview
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.CXDILogsDisplayViewModel.#ctor(System.Action{LogViewer.Model.CXDILogRecord},System.Action{LogViewer.Model.CXDILogRecord},System.Action{LogViewer.Model.CXDILogRecord},System.Action{System.String,System.String},System.Action{LogViewer.Model.CXDILogRecord,LogViewer.Model.AnalyzedPatternResultItem{LogViewer.Model.CXDILogRecord}},System.Collections.Generic.List{LogViewer.Model.LogDisplay},LogViewer.Business.FileSetting.BaseSettingManager,System.Action{System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.CXDILogsDisplayViewModel.CreateRecordVMFromData(LogViewer.Model.CXDILogRecord)" -->
        <member name="M:LogViewer.ViewModel.CXDILogsDisplayViewModel.CopyCommandCL">
            <summary>
            Command for copy action
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.HeaderToShow">
            <summary>
            Get or header log header to show
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayBookmark">
            <summary>
            Get displaying bookmark status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayLine">
            <summary>
            Get displaying line status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayDate">
            <summary>
            Get displaying date status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayTime">
            <summary>
            Get displaying time status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayMessage">
            <summary>
            Get displaying message status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayModule">
            <summary>
            Get displaying module status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogsDisplayViewModel.IsDisplayComment">
            <summary>
            Get displaying comments status
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CountKeywordTabViewModel">
            <summary>
            Class provides method for Count keyword tab
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.CountKeywordTabViewModel.StopCountKeyword">
            <summary>
            Action stop count keyword.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CountKeywordTabViewModel.#ctor(System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="stopCountKeyword">Action stop count keyword.</param>
        </member>
        <member name="M:LogViewer.ViewModel.CountKeywordTabViewModel.LoadData(System.Collections.Generic.IList{LogViewer.Model.AnalyzedCountKeywordItem})">
            <summary>
            Load data after analyze to count keyword tab
            </summary>
            <param name="data">Result count keyword</param>
        </member>
        <member name="F:LogViewer.ViewModel.CountKeywordTabViewModel._isLoadingData">
            <summary>
            Get or set IsLoadingData
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.CountKeywordTabViewModel._analyzeCountKeywordItems">
            <summary>
            Get or set collection analyze count keyword items
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.CountKeywordTabViewModel._cancelCountKeyword">
            <summary>
            Get or set cancel count keyword command
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CountKeywordTabViewModel.CancelCountKeywordCL">
            <summary>
            Function callback when cancel count keyword
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.CountKeywordTabViewModel._isShowTabKeyword">
            <summary>
            Get or set property IsShowTabKeyword
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CountKeywordTabViewModel.ClearData">
            <summary>
            Clear data in count keyword tab
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CCSAnalyzeAreaViewModel">
            <summary>
            Class provides methods for CCS analyze area log
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1">
            <summary>
            Base class provides common methods for analyze area log.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.#ctor(System.Action{`0},System.Action{`0,LogViewer.Model.AnalyzedPatternResultItem{`0}},System.Action,System.Action)">
            <summary>
            Default Constructor
            </summary>
            <param name="onShowLogRecord">Action show log record</param>
            <param name="onShowPatternColoringRecord">Action show pattern coloring</param>
            <param name="onStopCountKeyword">Action stop count keyword</param>
            <param name="onStopPatternAnalyzed">Action stop analyze pattern</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.AddBookmark(`0)">
            <summary>
            Add a bookmark in bookmark tab
            </summary>
            <param name="data">Base record</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.RemoveBookmark(`0)">
            <summary>
            Remove a bookmark in bookmark tab
            </summary>
            <param name="data">Base record</param>
        </member>
        <member name="E:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.OnShowLogRecord">
            <summary>
            Action show log record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.CountKeywordTabVM">
            <summary>
            Get or set count keyword tab
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.LogBookmarkTabVM">
            <summary>
            Get or set bookmark tab
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogAnalyzeAreaViewModel`1.LogPatternTabVM">
            <summary>
            Get or set analyzer pattern tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSAnalyzeAreaViewModel.#ctor(System.Action{LogViewer.Model.CCSLogRecord},System.Action{LogViewer.Model.CCSLogRecord,LogViewer.Model.AnalyzedPatternResultItem{LogViewer.Model.CCSLogRecord}},System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Default Constructor
            </summary>
            <param name="onShowLogRecord">Action show log record</param>
            <param name="onShowPatternColoringRecord">Action show pattern coloring</param>
            <param name="onStopCountKeyword">Action stop count keyword</param>
            <param name="onStopPatternAnalyzed">Action stop pattern analyze</param>
            <param name="onStopErrorAction">Action stop error action</param>
            <param name="onStopUserAction">Action stop user action</param>
        </member>
        <member name="P:LogViewer.ViewModel.CCSAnalyzeAreaViewModel.ErrorActionTabVM">
            <summary>
            Get or set error action tab
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSAnalyzeAreaViewModel.UserActionTabVM">
            <summary>
            Get or set user action tab
            </summary>
        </member>
        <member name="T:ColorChangedEventArgs">
            <summary>
            Class provides method for handling change event arguments
            </summary>
        </member>
        <member name="M:ColorChangedEventArgs.#ctor(ColorHandler.RGB,ColorHandler.HSV)">
            <summary>
            Do change event
            </summary>
            <param name="RGB"></param>
            <param name="HSV"></param>
        </member>
        <member name="P:ColorChangedEventArgs.RGB">
            <summary>
            Get color handler RGB
            </summary>
        </member>
        <member name="P:ColorChangedEventArgs.HSV">
            <summary>
            Get color handler HSV
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.SwitchCaseCollection">
            <summary>
            A collection of switch cases.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchCaseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwitchCaseCollection"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchCaseCollection.Add(System.Object,System.Object)">
            <summary>
            Adds a new case to the collection.
            </summary>
            <param name="when">The value to compare against the input.</param>
            <param name="then">The output value to use if the case matches.</param>
        </member>
        <member name="T:LogViewer.ViewModel.LoadingDialogViewModel">
            <summary>
            Class present for loading dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LoadingDialogViewModel.#ctor">
            <summary>
            Initializes a new instance of the LoadingDialogViewModel class.
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LoadingDialogViewModel.ExecuteWhilePopUpLoading(System.Action,System.Object,System.Action)">
            <summary>
            Execute while Loading dialog showing
            </summary>
            <param name="action">Main action when loading dialog is showing</param>
            <param name="ownerWindowVM">Parent window of loading dialog</param>
            <param name="onCompleteAction">Action run when main action is done</param>
        </member>
        <member name="P:LogViewer.ViewModel.LoadingDialogViewModel.LoadingText">
            <summary>
            Get set Message in loading dialog
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LoadingDialogViewModel.LoadingTitle">
            <summary>
            Get set Title in loading dialog
            </summary>
        </member>
        <member name="T:LogViewer.Business.KeywordCountItemSetting">
            <summary>
            Class provides method for containing keyword count parameter
            </summary>
        </member>
        <member name="M:LogViewer.Business.KeywordCountItemSetting.Copy">
            <summary>
            Clone to new object
            </summary>
            <returns><see cref="T:LogViewer.Business.KeywordCountItemSetting"/></returns>
        </member>
        <member name="M:LogViewer.Business.KeywordCountItemSetting.ValidDate(System.Collections.Generic.List{System.String})">
            <summary>
            Validate for a keyword count setting object have valid data or not.
            This method will valid on properties: Name, StringValue and LogItem
            </summary>
            <param name="logDisplayHeader">List of system log header <see cref="!:BaseSettingManager.GetLogHeader()"/></param>
            <returns></returns>
        </member>
        <member name="P:LogViewer.Business.KeywordCountItemSetting.StringValue">
            <summary>
            Get or set value of keyword
            </summary>
        </member>
        <member name="P:LogViewer.Business.KeywordCountItemSetting.LogItem">
            <summary>
            Get or set name of log record
            </summary>
        </member>
        <member name="P:LogViewer.Business.KeywordCountItemSetting.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="M:LogViewer.ViewModel.FilterButtonViewModel.#ctor(LogViewer.Business.FilterItemSetting,System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="data"><see cref="T:LogViewer.Business.FilterItemSetting"/></param>
            <param name="onClickEvent"><see cref="T:System.Action"/></param>
        </member>
        <member name="E:LogViewer.ViewModel.FilterButtonViewModel.OnClickEvent">
            <summary>
            Class provides method for filtering
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FilterButtonViewModel.FontStyle">
            <summary>
            Get font style
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FilterButtonViewModel.Foreground">
            <summary>
            Get foreground
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FilterButtonViewModel.Background">
            <summary>
            Get background
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FilterButtonViewModel.Name">
            <summary>
            Get filter name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FilterButtonViewModel.Enabled">
            <summary>
            Get enable status
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.GraphViewModel">
            <summary>
            Base class provides common methods for setting graph parameter view model
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.#ctor(LogViewer.Util.GetGraphDataDelegate)">
            <summary>
            Default constructor
            </summary>
            <param name="onApplyGraphSettingEvent"><see cref="T:LogViewer.Util.GetGraphDataDelegate"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ParamSettingCL">
            <summary>
            Command function for setting parameter
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.SetRangeCommandCL">
            <summary>
            Command function for setting range
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.HasData(LogViewer.Business.GraphResult)">
            <summary>
            Check for graph result has data or not
            </summary>
            <param name="graphResult"><see cref="T:LogViewer.Business.GraphResult"/></param>
            <returns>True: has data, False: has no data</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ExportToCSVCL">
            <summary>
            Do export graph data to CSV
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.export(LogViewer.ViewModel.SaveFileDialogViewModel,System.Boolean)">
            <summary>
            Do exporting graph data to CSV file
            </summary>
            <param name="dlgVM"><see cref="T:LogViewer.ViewModel.SaveFileDialogViewModel"/> for selecting file path</param>
            <param name="isExport">Exporting status, True: success, False: fail</param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ExportToCSV">
            <summary>
            Export graph data to CSV
            </summary>
            <returns>result of string</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.IsInRangeGraphLine1(LogViewer.Business.GraphParamResultItem)">
            <summary>
            Check for <see cref="T:LogViewer.Business.GraphParamResultItem"/> (value case, line 1) is in range or not
            </summary>
            <param name="item"><see cref="T:LogViewer.Business.GraphParamResultItem"/></param>
            <returns>True: if is in range, otherwise is False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.IsInRangeGraphLine2(LogViewer.Business.GraphParamResultItem)">
            <summary>
            Check for <see cref="T:LogViewer.Business.GraphParamResultItem"/> (value case, line 2) is in range or not
            </summary>
            <param name="item"><see cref="T:LogViewer.Business.GraphParamResultItem"/></param>
            <returns>True: if is in range, otherwise is False</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.IsInRangeGraphEvent(LogViewer.Business.GraphParamResultItem)">
            <summary>
            Check for <see cref="T:LogViewer.Business.GraphParamResultItem"/> (event case) is in range or not
            </summary>
            <param name="item"><see cref="T:LogViewer.Business.GraphParamResultItem"/></param>
            <returns>True: if is in range, otherwise is False</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.GraphViewModel.AddWhenNotNull``1(System.Collections.Generic.List{``0},``0)" -->
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.GraphViewModel.AddRangeWhenNotNull``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})" -->
        <member name="M:LogViewer.ViewModel.GraphViewModel.ExportGraphLineDataToCSVMatrix(System.String,System.Collections.Generic.IEnumerable{LogViewer.Business.GraphParamResultItem})">
            <summary>
            Create list of exporting data to export  graph data csv file
            </summary>
            <param name="name">Name of value parameter</param>
            <param name="resultList">List of <see cref="T:LogViewer.Business.GraphParamResultItem"/></param>
            <returns>List of result data</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ExportGraphEventDataToCSVMatrix(System.String,System.Collections.Generic.IEnumerable{LogViewer.Business.GraphParamResultItem})">
            <summary>
            Create list of exporting data to export  graph data csv file
            </summary>
            <param name="name">Name of event parameter <seealso cref="T:LogViewer.Business.GraphParamSetting"/></param>
            <param name="resultList">List of <see cref="T:LogViewer.Business.GraphParamResultItem"/></param>
            <returns>List of result data</returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ApplyParamSetting(System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting})">
            <summary>
            Apply for parameter setting
            </summary>
            <param name="paramSetting">List of <see cref="T:LogViewer.Business.GraphParamSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.ApplyRangeSetting(LogViewer.Business.GraphRangeSetting)">
            <summary>
            Apply for range setting
            </summary>
            <param name="rangeSetting"><see cref="T:LogViewer.Business.GraphRangeSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.SetMinMaxAxes(LogViewer.Business.GraphRangeSetting)">
            <summary>
            Set limit mininize and maximize for axises
            </summary>
            <param name="rangeSetting"><see cref="T:LogViewer.Business.GraphRangeSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.InitValueVeticalEvent(System.Collections.Generic.IList{LogViewer.Business.GraphResult})">
            <summary>
            Initial vertical value for event line
            </summary>
            <param name="eventListData">Event line <see cref="T:LogViewer.Business.GraphResult"/></param>
            <returns>List of <see cref="T:LogViewer.Business.GraphResult"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.LoadData(LogViewer.Business.GraphResult,LogViewer.Business.GraphResult,System.Collections.Generic.IList{LogViewer.Business.GraphResult})">
            <summary>
            Load analyzed data to <see cref="T:LogViewer.Business.GraphResult"/> for display to graph
            </summary>
            <param name="graphLineData1">The first <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="graphLineData2">The second <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="eventListData">Event line <see cref="T:LogViewer.Business.GraphResult"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.InitGraphRangeSetting(LogViewer.Business.GraphResult,LogViewer.Business.GraphResult,System.Collections.Generic.IList{LogViewer.Business.GraphResult})">
            <summary>
            Initialize for displaying graph
            </summary>
            <param name="graphLineData1">The first <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="graphLineData2">The second <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="eventListData">Event line <see cref="T:LogViewer.Business.GraphResult"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.LoadData(LogViewer.Business.GraphResult,LogViewer.Business.GraphResult,System.Collections.Generic.IList{LogViewer.Business.GraphResult},System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting})">
            <summary>
            Load analyzed data to <see cref="T:LogViewer.Business.GraphResult"/> for display to graph
            </summary>
            <param name="graphLineData1">The first <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="graphLineData2">The second <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="eventListData">Event line <see cref="T:LogViewer.Business.GraphResult"/></param>
            <param name="paramSetting"><see cref="T:LogViewer.Business.GraphParamSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.CloseDialog">
            <summary>
            Close dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.GraphViewModel.dialog_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Close the dialog then set <see cref="!:IsShow"/> status of <see cref="!:GraphRangeVM"/> and <see cref="!:GrapParamVM"/> to false
            </summary>
            <param name="sender">The sender object</param>
            <param name="e"><see cref="!:CancelEventArgs"/></param>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.IsShowEvent">
            <summary>
            Get or set IsShowEvent
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.IsHaveGraphData">
            <summary>
            Get or set status for graph had or had no data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.IsInitGraphFlag">
            <summary>
            Get or set status for graph initialization
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.FirstRangeMaxY">
            <summary>
            Get or set maximum range of Y axis of the first line
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.FirstRangeMinY">
            <summary>
            Get or set minimum range of Y axis of the first line
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.SecondRangeMaxY">
            <summary>
            Get or set maximum range of Y axis of the second line
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.SecondRangeMinY">
            <summary>
            Get or set minimum range of Y axis of the second line
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.MinDate">
            <summary>
            Get or set minimum date
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.MaxDate">
            <summary>
            Get or set maximum date
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphLineData1">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 1)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphLineData2">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 2)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData1">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 1)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData2">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 2)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData3">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 3)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData4">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 4)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData5">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 5)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData6">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 6)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData7">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 7)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData8">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 8)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData9">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 9)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.GraphEventData10">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphResult"/> (line 10)
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.ParamSettingCommand">
            <summary>
            Command interface for setting parameter
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.SetRangeCommand">
            <summary>
            Command interface function for setting range
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.GraphViewModel.ExportToCSVCommand">
            <summary>
            Command function for exporting graph data to CSV file
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditCXDIKeywordCountSettingViewModel">
            <summary>
            Class provides methods for setting keyword count parameter
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditCXDIKeywordCountSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.KeywordCountItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditCXDIKeywordCountSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default log item
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.EditCXDIKeywordCountSettingViewModel.AllLogItems">
            <summary>
            Get all log item
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialog">
            <summary>
            Class wrapping System.Windows.Forms.OpenFileDialog, making it accept a IOpenFileDialog.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialog.#ctor(LogViewer.Service.FrameworkDialogs.OpenFile.IOpenFileDialog)">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialog"/> class.
            </summary>
            <param name="openFileDialog">The interface of a open file dialog.</param>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Runs a common dialog box with the specified owner.
            </summary>
            <param name="owner">
            Any object that implements System.Windows.Forms.IWin32Window that represents the top-level
            window that will own the modal dialog box.
            </param>
            <returns>
            System.Windows.Forms.DialogResult.OK if the user clicks OK in the dialog box; otherwise,
            System.Windows.Forms.DialogResult.Cancel.
            </returns>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.FileDialogViewModel">
            <summary>
            ViewModel of the abstract FileDialog.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.Service.FrameworkDialogs.FileDialogViewModel"/> class.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.AddExtension">
            <summary>
            Gets or sets a value indicating whether the dialog box automatically adds an extension to a
            file name if the user omits the extension.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user
            specifies a file name that does not exist.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.CheckPathExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user
            specifies a path that does not exist.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.DefaultExt">
            <summary>
            Gets or sets the default file name extension.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.FileNames">
            <summary>
            Gets the file names of all selected files in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines the choices that appear
            in the "Save as file type" or "Files of type" box in the dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.FileDialogViewModel.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="T:LogViewer.Service.DialogService">
            <summary>
            Class responsible for abstracting ViewModels from Views.
            </summary>
        </member>
        <member name="T:LogViewer.Service.IDialogService">
            <summary>
            Interface responsible for abstracting ViewModels from Views.
            </summary>
        </member>
        <member name="M:LogViewer.Service.IDialogService.Register(System.Windows.FrameworkElement)">
            <summary>
            Registers a View.
            </summary>
            <param name="view">The registered View.</param>
        </member>
        <member name="M:LogViewer.Service.IDialogService.Unregister(System.Windows.FrameworkElement)">
            <summary>
            Unregisters a View.
            </summary>
            <param name="view">The unregistered View.</param>
        </member>
        <member name="M:LogViewer.Service.IDialogService.ShowDialog(System.Object,System.Object)">
            <summary>
            Shows a dialog.
            </summary>
            <remarks>
            The dialog used to represent the ViewModel is retrieved from the registered mappings.
            </remarks>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.IDialogService.ShowDialog``1(System.Object,System.Object)">
            <summary>
            Shows a dialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <typeparam name="T">The type of the dialog to show.</typeparam>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.IDialogService.ShowMessageBox(System.Object,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Shows a message box.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the message box.
            </param>
            <param name="messageBoxText">A string that specifies the text to display.</param>
            <param name="caption">A string that specifies the title bar caption to display.</param>
            <param name="button">
            A MessageBoxButton value that specifies which button or buttons to display.
            </param>
            <param name="icon">A MessageBoxImage value that specifies the icon to display.</param>
            <returns>
            A MessageBoxResult value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.IDialogService.ShowOpenFileDialog(System.Object,LogViewer.Service.FrameworkDialogs.OpenFile.IOpenFileDialog)">
            <summary>
            Shows the OpenFileDialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="openFileDialog">The interface of a open file dialog.</param>
            <returns>DialogResult.OK if successful; otherwise DialogResult.Cancel.</returns>
        </member>
        <member name="M:LogViewer.Service.IDialogService.ShowFolderBrowserDialog(System.Object,LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog)">
            <summary>
            Shows the FolderBrowserDialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="folderBrowserDialog">The interface of a folder browser dialog.</param>
            <returns>The DialogResult.OK if successful; otherwise DialogResult.Cancel.</returns>
        </member>
        <member name="P:LogViewer.Service.IDialogService.Views">
            <summary>
            Gets the registered views.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.#ctor(LogViewer.WindowViewModelMapping.IWindowViewModelMappings)">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.Service.DialogService"/> class.
            </summary>
            <param name="windowViewModelMappings">
            The window ViewModel mappings. Default value is null.
            </param>
        </member>
        <member name="M:LogViewer.Service.DialogService.Register(System.Windows.FrameworkElement)">
            <summary>
            Registers a View.
            </summary>
            <param name="view">The registered View.</param>
        </member>
        <member name="M:LogViewer.Service.DialogService.Unregister(System.Windows.FrameworkElement)">
            <summary>
            Unregisters a View.
            </summary>
            <param name="view">The unregistered View.</param>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowDialog(System.Object,System.Object)">
            <summary>
            Shows a dialog.
            </summary>
            <remarks>
            The dialog used to represent the ViewModel is retrieved from the registered mappings.
            </remarks>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowDialog``1(System.Object,System.Object)">
            <summary>
            Shows a dialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <typeparam name="T">The type of the dialog to show.</typeparam>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowMessageBox(System.Object,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Shows a message box.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the message box.
            </param>
            <param name="messageBoxText">A string that specifies the text to display.</param>
            <param name="caption">A string that specifies the title bar caption to display.</param>
            <param name="button">
            A MessageBoxButton value that specifies which button or buttons to display.
            </param>
            <param name="icon">A MessageBoxImage value that specifies the icon to display.</param>
            <returns>
            A MessageBoxResult value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowOpenFileDialog(System.Object,LogViewer.Service.FrameworkDialogs.OpenFile.IOpenFileDialog)">
            <summary>
            Shows the OpenFileDialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="openFileDialog">The interface of a open file dialog.</param>
            <returns>DialogResult.OK if successful; otherwise DialogResult.Cancel.</returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowFolderBrowserDialog(System.Object,LogViewer.Service.FrameworkDialogs.FolderBrowse.IFolderBrowserDialog)">
            <summary>
            Shows the FolderBrowserDialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="folderBrowserDialog">The interface of a folder browser dialog.</param>
            <returns>The DialogResult.OK if successful; otherwise DialogResult.Cancel.</returns>
        </member>
        <member name="F:LogViewer.Service.DialogService.IsRegisteredViewProperty">
            <summary>
            Attached property describing whether a FrameworkElement is acting as a View in MVVM.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.GetIsRegisteredView(System.Windows.FrameworkElement)">
            <summary>
            Gets value describing whether FrameworkElement is acting as View in MVVM.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.SetIsRegisteredView(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets value describing whether FrameworkElement is acting as View in MVVM.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.IsRegisteredViewPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Is responsible for handling IsRegisteredViewProperty changes, i.e. whether
            FrameworkElement is acting as View in MVVM or not.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.ShowDialog(System.Object,System.Object,System.Type)">
            <summary>
            Shows a dialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <param name="dialogType">The type of the dialog.</param>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.Show(System.Object,System.Object,System.Type)">
            <summary>
            Shows a dialog.
            </summary>
            <param name="ownerViewModel">
            A ViewModel that represents the owner window of the dialog.
            </param>
            <param name="viewModel">The ViewModel of the new dialog.</param>
            <param name="dialogType">The type of the dialog.</param>
            <returns>
            A null-able value of type bool that signifies how a window was closed by the user.
            </returns>
        </member>
        <member name="M:LogViewer.Service.DialogService.FindOwnerWindow(System.Object)">
            <summary>
            Finds window corresponding to specified ViewModel.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.LateRegister(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Callback for late View register. It wasn't possible to do a instant register since the
            View wasn't at that point part of the logical nor visual tree.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.OwnerClosed(System.Object,System.EventArgs)">
            <summary>
            Handles owner window closed, View service should then unregister all Views acting
            within the closed window.
            </summary>
        </member>
        <member name="M:LogViewer.Service.DialogService.GetOwner(System.Windows.FrameworkElement)">
            <summary>
            Gets the owning Window of a view.
            </summary>
            <param name="view">The view.</param>
            <returns>The owning Window if found; otherwise null.</returns>
        </member>
        <member name="P:LogViewer.Service.DialogService.Views">
            <summary>
            Gets the registered views.
            </summary>
        </member>
        <member name="T:LogViewer.Model.ValueDisplayPair`2">
            <summary>
            Model class for storing information of pair value in analyze pattern process <seealso cref="!:AnalyzePattern"/>
            </summary>
            <typeparam name="TValue"><see cref="!:TValue"/></typeparam>
            <typeparam name="TDisplay"><see cref="!:TDisplay"/></typeparam>
        </member>
        <member name="M:LogViewer.Model.ValueDisplayPair`2.#ctor(`0,`1)">
            <summary>
            Default constructor
            </summary>
            <param name="value"><see cref="!:TValue"/></param>
            <param name="display"><see cref="!:TDisplay"/></param>
        </member>
        <member name="M:LogViewer.Model.ValueDisplayPair`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LogViewer.Model.ValueDisplayPair`2.Value">
            <summary>
            Get or set <see cref="!:TValue"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.ValueDisplayPair`2.Display">
            <summary>
            Get or set <see cref="!:TDisplay"/>
            </summary>
        </member>
        <member name="T:LogViewer.Business.GraphType">
            <summary>
            Enum array for definition graph type. 
            Value: if the type of graph is valuation.
            Event: if the type of project is event
            <seealso cref="T:LogViewer.Business.GraphParamSetting"/>.
            </summary>
        </member>
        <member name="T:LogViewer.Util.BetterDialog">
            <summary>
            An improved dialog, with OS styling, an icon, a large header, and smaller explanation text.
            </summary>
        </member>
        <member name="F:LogViewer.Util.BetterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LogViewer.Util.BetterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LogViewer.Util.BetterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:LogViewer.Util.BetterDialog.ShowDialog(System.String,System.String,System.String,System.String,System.String,System.Drawing.Image)">
            <summary>
            Create a special dialog in the style of Windows XP or Vista. A dialog has a custom icon, an optional large
            title in the form, body text, window text, and one or two custom-labeled buttons.
            </summary>
            <param name="titleString">This string will be displayed in the system window frame.</param>
            <param name="bigString">This is the first string to appear in the dialog. It will be most prominent.</param>
            <param name="smallString">This string appears either under the big string, or is null, which means it is
            not displayed at all.</param>
            <param name="leftButton">This is the left button, typically the "accept" button--label it with an
            action verb (or "OK").</param>
            <param name="rightButton">The right button--typically "Cancel", but could be "No".</param>
            <param name="iconSet">An image to be displayed on the left side of the dialog. Should be 32 x 32 pixels.</param>
        </member>
        <member name="M:LogViewer.Util.BetterDialog.#ctor(System.String,System.String,System.String,System.String,System.String,System.Drawing.Image)">
            <summary>
            The private constructor. This is only called by the static method ShowDialog.
            </summary>
        </member>
        <member name="T:LogViewer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ClearAll">
            <summary>
              Looks up a localized string similar to _Clear All.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ClearAnalyzedResult">
            <summary>
              Looks up a localized string similar to _Clear Analyzed Result.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Edit">
            <summary>
              Looks up a localized string similar to _Edit.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Export">
            <summary>
              Looks up a localized string similar to _Export.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ExportEtc">
            <summary>
              Looks up a localized string similar to _Export....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._File">
            <summary>
              Looks up a localized string similar to _File.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._OpenEtc">
            <summary>
              Looks up a localized string similar to _Open....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Option">
            <summary>
              Looks up a localized string similar to _Option.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Quit">
            <summary>
              Looks up a localized string similar to _Quit.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Range">
            <summary>
              Looks up a localized string similar to _Range.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ResetBookmarks">
            <summary>
              Looks up a localized string similar to _Reset Bookmarks.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ResetColorFilters">
            <summary>
              Looks up a localized string similar to _Reset Color Filters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ResetComments">
            <summary>
              Looks up a localized string similar to _Reset Comments.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._ResetFilters">
            <summary>
              Looks up a localized string similar to _Reset Filters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._Search">
            <summary>
              Looks up a localized string similar to _Search.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._SetKeyword">
            <summary>
              Looks up a localized string similar to _Set Keyword.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._SetLogParameter">
            <summary>
              Looks up a localized string similar to _Set Log Parameter.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources._SetParameter">
            <summary>
              Looks up a localized string similar to _Set parameter.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Add">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.AdditionalInfo">
            <summary>
              Looks up a localized string similar to Additional Info.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.AddPatternItem">
            <summary>
              Looks up a localized string similar to Add Pattern Item.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Apply">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.BackGroundColor">
            <summary>
              Looks up a localized string similar to BackGround Color.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Bookmark">
            <summary>
              Looks up a localized string similar to Bookmark.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Bookmarks">
            <summary>
              Looks up a localized string similar to Bookmarks.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CAN_NOT_CREATE_FILE">
            <summary>
              Looks up a localized string similar to Cannot create file..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CCS">
            <summary>
              Looks up a localized string similar to CCS.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CCSLogFile">
            <summary>
              Looks up a localized string similar to _CCS Log File.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CCSMemoLogFile">
            <summary>
              Looks up a localized string similar to _CCS Memo Log File.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ClassName">
            <summary>
              Looks up a localized string similar to Class Name.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Clear">
            <summary>
              Looks up a localized string similar to Clear.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Colon">
            <summary>
              Looks up a localized string similar to :.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Comment">
            <summary>
              Looks up a localized string similar to Comment.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Confirm">
            <summary>
              Looks up a localized string similar to Confirm.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ConfirmMergeFileCaption">
            <summary>
              Looks up a localized string similar to Open new file.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ConfirmMergeFileMessage">
            <summary>
              Looks up a localized string similar to Do you want to merge the new file to the current file(s)?.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Content">
            <summary>
              Looks up a localized string similar to Content.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Contents">
            <summary>
              Looks up a localized string similar to Contents.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Count">
            <summary>
              Looks up a localized string similar to Count.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CounterParameter">
            <summary>
              Looks up a localized string similar to Counter Parameters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CXDI">
            <summary>
              Looks up a localized string similar to CXDI.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CXDILogFile">
            <summary>
              Looks up a localized string similar to _CXDI Log File.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.CXDIMemoLogFile">
            <summary>
              Looks up a localized string similar to _CXDI Memo Log File.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DATA_VALUE_NOT_SUPPORTED_EXCEPTION_MESSAGE">
            <summary>
              Looks up a localized string similar to Data value is not supported.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Date">
            <summary>
              Looks up a localized string similar to Date.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DATE_DISPLAY_TEXT">
            <summary>
              Looks up a localized string similar to Date must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DateColon">
            <summary>
              Looks up a localized string similar to Date:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DateTime">
            <summary>
              Looks up a localized string similar to Date time &apos;.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DateTimeToGreaterThanFromValueErrorMessage">
            <summary>
              Looks up a localized string similar to X Range: &quot;To&quot; value must be greater than &quot;From&quot; value.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DuplicateKeywordErrorMessage">
            <summary>
              Looks up a localized string similar to Keyword is duplicate..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DuplicateKeywordWithLogItemErrorMessage">
            <summary>
              Looks up a localized string similar to Keyword and Log item are duplicate.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.DuplicateNameErrorMessage">
            <summary>
              Looks up a localized string similar to Name is duplicate..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Edit">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.EditPatternItem">
            <summary>
              Looks up a localized string similar to Edit Pattern.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Elements">
            <summary>
              Looks up a localized string similar to Elements.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Enable">
            <summary>
              Looks up a localized string similar to Enable.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ErrorAction">
            <summary>
              Looks up a localized string similar to Error Action.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ErrorCode">
            <summary>
              Looks up a localized string similar to Error Code.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ErrorMessage">
            <summary>
              Looks up a localized string similar to Error Message.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ErrorRecipe">
            <summary>
              Looks up a localized string similar to Error Recipe.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Event">
            <summary>
              Looks up a localized string similar to Event.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.EXPORT_FAILURE">
            <summary>
              Looks up a localized string similar to The process cannot access the file {0} because it is being used by another process. Please change the file name for export..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Exporting3Dot">
            <summary>
              Looks up a localized string similar to Exporting....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FILE_LOG_LOAD_CAPTION">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FILE_LOG_LOAD_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FILE_LOG_LOAD_INVALID_EXTENSION">
            <summary>
              Looks up a localized string similar to Invalid extension.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FILE_WRITE_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when writing to file: {0}..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FilterColon">
            <summary>
              Looks up a localized string similar to Filter:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FilterNameColon">
            <summary>
              Looks up a localized string similar to Filter Name:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FilterSetting">
            <summary>
              Looks up a localized string similar to Filter Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FilterStringColon">
            <summary>
              Looks up a localized string similar to Filter String:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FIND_OWNER_WINDOW_ARGUMENT_EXCEPTION">
            <summary>
              Looks up a localized string similar to Viewmodel is not referenced by any registered View..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FIND_OWNER_WINDOW_INVALID_OPERATION_EXCEPTION">
            <summary>
              Looks up a localized string similar to View is not contained within a Window..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Firmware">
            <summary>
              Looks up a localized string similar to Firmware.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FirstYToGreaterThanFromValueErrorMessage">
            <summary>
              Looks up a localized string similar to 1st Y Range: &quot;To&quot; value must be greater than &quot;From&quot; value.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FollowMode">
            <summary>
              Looks up a localized string similar to Follow Mode.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.FontStyle">
            <summary>
              Looks up a localized string similar to Font Style.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ForeGroundColor">
            <summary>
              Looks up a localized string similar to ForeGround Color.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Graph">
            <summary>
              Looks up a localized string similar to Graph.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.GRAPH_EXPORT_NO_DATA">
            <summary>
              Looks up a localized string similar to No data to export..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.GraphParamSetting">
            <summary>
              Looks up a localized string similar to Graph Param Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.h">
            <summary>
              Looks up a localized string similar to h.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.HostName">
            <summary>
              Looks up a localized string similar to Host Name.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Id">
            <summary>
              Looks up a localized string similar to Log Id.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.InputKeywordColon">
            <summary>
              Looks up a localized string similar to Input Keyword:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Item">
            <summary>
              Looks up a localized string similar to Item.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.JumpTo">
            <summary>
              Looks up a localized string similar to Jump to.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.KeywordColon">
            <summary>
              Looks up a localized string similar to Keyword:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.KeywordCount">
            <summary>
              Looks up a localized string similar to Keyword Count.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.KeywordCountSetting">
            <summary>
              Looks up a localized string similar to Keyword Count Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Level">
            <summary>
              Looks up a localized string similar to Level.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Line">
            <summary>
              Looks up a localized string similar to Line .
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LineNumber">
            <summary>
              Looks up a localized string similar to Line Number.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Loading_Summary">
            <summary>
              Looks up a localized string similar to Please wait a moment....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Loading_Window_Title">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LOG">
            <summary>
              Looks up a localized string similar to log.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogDisplaySetting">
            <summary>
              Looks up a localized string similar to Log Display Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogId">
            <summary>
              Looks up a localized string similar to Log Id.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogItem">
            <summary>
              Looks up a localized string similar to Log Item.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogItemColon">
            <summary>
              Looks up a localized string similar to Log Item:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogItemNotEmptyErrorMessage">
            <summary>
              Looks up a localized string similar to Log item must not be empty..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogKindTarget_CCS">
            <summary>
              Looks up a localized string similar to CCS.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogKindTarget_CCS_CXDI">
            <summary>
              Looks up a localized string similar to CCS and CXDI.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogKindTarget_CXDI">
            <summary>
              Looks up a localized string similar to CXDI.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogType">
            <summary>
              Looks up a localized string similar to Log Type.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogTypeColon">
            <summary>
              Looks up a localized string similar to Log Type:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.LogViewer">
            <summary>
              Looks up a localized string similar to Log Viewer.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.m">
            <summary>
              Looks up a localized string similar to m.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Max">
            <summary>
              Looks up a localized string similar to Max: .
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MAXIMUM_DATE_EXCEPTION">
            <summary>
              Looks up a localized string similar to Maximum date must be greater than Minimum date.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MaximumFilterItemErrorMessage">
            <summary>
              Looks up a localized string similar to Maximum filter item..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_CAPTION">
            <summary>
              Looks up a localized string similar to Export Memo....
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_EXIST_FILE_CAPTION">
            <summary>
              Looks up a localized string similar to Confirm.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_EXIST_FILE_TEXT">
            <summary>
              Looks up a localized string similar to File already exists. Do you want to overwrite?.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_NO_RECORD">
            <summary>
              Looks up a localized string similar to No log record to export..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_TEXT_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when writing to file: {0}..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_EXPORT_TEXT_SUCCESS">
            <summary>
              Looks up a localized string similar to Export Successfully.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_IMPORT_CAPTION">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MEMO_IMPORT_TEXT_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Merge">
            <summary>
              Looks up a localized string similar to Merge.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Message">
            <summary>
              Looks up a localized string similar to Message.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MessageConfirm">
            <summary>
              Looks up a localized string similar to Are you sure you want to delete?.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MessageFileAlreadyLoad">
            <summary>
              Looks up a localized string similar to File already loaded..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Mode">
            <summary>
              Looks up a localized string similar to Mode.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Module">
            <summary>
              Looks up a localized string similar to Module.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MoveToLine">
            <summary>
              Looks up a localized string similar to Move To Line.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.MoveToTime">
            <summary>
              Looks up a localized string similar to Move To Time.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ms">
            <summary>
              Looks up a localized string similar to ms.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Name">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NameColon">
            <summary>
              Looks up a localized string similar to Name:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.New">
            <summary>
              Looks up a localized string similar to Latest: .
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NO_RECORD_EXPORTED">
            <summary>
              Looks up a localized string similar to No records exported.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NOT_DETECT_FORMAT_FILE_EXCEPTION">
            <summary>
              Looks up a localized string similar to Cannot detect file format..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NOT_READ_FILE_EXCEPTION">
            <summary>
              Looks up a localized string similar to Cannot read file:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NotDisplayLogViewMessage">
            <summary>
              Looks up a localized string similar to  is not displayed in log view..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.NotDisplayLogViewWithDateTimeMessage">
            <summary>
              Looks up a localized string similar to &apos; is not displayed in log view..
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Object">
            <summary>
              Looks up a localized string similar to Object.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Old">
            <summary>
              Looks up a localized string similar to Earliest: .
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Overwrite">
            <summary>
              Looks up a localized string similar to Overwrite.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Parameter">
            <summary>
              Looks up a localized string similar to Parameter.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.PatternAnalyzed">
            <summary>
              Looks up a localized string similar to Pattern Analyzed.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.PersonalInfo">
            <summary>
              Looks up a localized string similar to Personal Info.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.PleaseInputAValidDecimalNumberOrAValidFraction">
            <summary>
              Looks up a localized string similar to Please input a valid number or fraction.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.PleaseInputFilterString">
            <summary>
              Looks up a localized string similar to Please input filter string.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.PleaseInputNumberValueGreaterOrEqual0">
            <summary>
              Looks up a localized string similar to Please input number greater or equal 0.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ProcessTimeColon">
            <summary>
              Looks up a localized string similar to Process Time:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_DISPLAY_SETTING_FILE_NOT_FOUND_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_FILTER_SETTING_FILE_NOT_FOUND_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_FILTER_SETTING_OTHER_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_KEYWORD_COUNT_SETTING_FILE_NOT_FOUND_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_KEYWORD_COUNT_SETTING_OTHER_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_PATTERN_SETTING_FILE_NOT_FOUND_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.READ_PATTERN_SETTING_OTHER_EXCEPTION">
            <summary>
              Looks up a localized string similar to Error occurred when reading file: {0}.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Replace">
            <summary>
              Looks up a localized string similar to Replace.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ResultColon">
            <summary>
              Looks up a localized string similar to Result:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.RootKeywordColon">
            <summary>
              Looks up a localized string similar to Root Keyword:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.s">
            <summary>
              Looks up a localized string similar to s.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.SaveParameter">
            <summary>
              Looks up a localized string similar to Saved Parameters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Search">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.SecondYToGreaterThanFromValueErrorMessage">
            <summary>
              Looks up a localized string similar to 2nd Y Range: &quot;To&quot; value must be greater than &quot;From&quot; value.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.SelectAll">
            <summary>
              Looks up a localized string similar to Select All.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.SelectLogKindErrorMessage">
            <summary>
              Looks up a localized string similar to Please select at least one element for each log type.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ShowGrid">
            <summary>
              Looks up a localized string similar to Show Grid.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Slash">
            <summary>
              Looks up a localized string similar to /.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.String">
            <summary>
              Looks up a localized string similar to String.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ThreadId">
            <summary>
              Looks up a localized string similar to Thread ID.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Time">
            <summary>
              Looks up a localized string similar to Time.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TimeColon">
            <summary>
              Looks up a localized string similar to Time:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TimeConditionColon">
            <summary>
              Looks up a localized string similar to Time Condition:.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCCSFilterSetting">
            <summary>
              Looks up a localized string similar to CCS Filter Settting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCCSKeywordCountSetting">
            <summary>
              Looks up a localized string similar to CCS Keyword Count Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCCSPatternManager">
            <summary>
              Looks up a localized string similar to CCS Pattern Manager.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCXDIFilterSetting">
            <summary>
              Looks up a localized string similar to CXDI Filter Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCXDIKeywordCountSetting">
            <summary>
              Looks up a localized string similar to CXDI Keyword Count Setting.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TitleCXDIPatternManager">
            <summary>
              Looks up a localized string similar to CXDI Pattern Manager.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ToCSV">
            <summary>
              Looks up a localized string similar to _To CSV.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ToImage">
            <summary>
              Looks up a localized string similar to _To image.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.TXT">
            <summary>
              Looks up a localized string similar to txt.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Type">
            <summary>
              Looks up a localized string similar to Log Type.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.UserAction">
            <summary>
              Looks up a localized string similar to User Action.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyNameMessage">
            <summary>
              Looks up a localized string similar to Name must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyRootKeyMessage">
            <summary>
              Looks up a localized string similar to Root Keyword must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyStringListMessage">
            <summary>
              Looks up a localized string similar to List of String must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyStringMessage">
            <summary>
              Looks up a localized string similar to String must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyStringObjectMessage">
            <summary>
              Looks up a localized string similar to Object must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateEmptyStringValueMessage">
            <summary>
              Looks up a localized string similar to String must not be empty.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateLengthKeywordMessage">
            <summary>
              Looks up a localized string similar to Maximum length of Keyword is 50 characters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateLengthNameMessage">
            <summary>
              Looks up a localized string similar to Maximum length of Name is 50 characters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateLengthRootKeyMessage">
            <summary>
              Looks up a localized string similar to Maximum length of Root Keyword is 50 characters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateLengthStringObjectMessage">
            <summary>
              Looks up a localized string similar to Maximum length of Object is 50 characters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateLengthStringValueMessage">
            <summary>
              Looks up a localized string similar to Maximum length of String is 50 characters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateMaximumEnableParameter">
            <summary>
              Looks up a localized string similar to Can enable upto 2 parameters.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateMaxKeywordCountMessage">
            <summary>
              Looks up a localized string similar to Can filter upto 5 keywords.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateMaxRegisterItemMessage">
            <summary>
              Looks up a localized string similar to Can register upto 10 items.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateUniqueNameMessage">
            <summary>
              Looks up a localized string similar to Name must be unique.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.ValidateUniqueStringValueMessage">
            <summary>
              Looks up a localized string similar to String must be unique.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Visible">
            <summary>
              Looks up a localized string similar to Visible.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.XML">
            <summary>
              Looks up a localized string similar to xml.
            </summary>
        </member>
        <member name="P:LogViewer.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:LogViewer.Util.ColorPicker">
            <summary>
            Summary description for ColorPicker.
            </summary>
        </member>
        <member name="F:LogViewer.Util.ColorPicker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LogViewer.Util.ColorPicker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LogViewer.Util.ColorPicker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.WindowWrapper">
            <summary>
            WindowWrapper is an IWin32Window wrapper around a WPF window.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.WindowWrapper.#ctor(System.Windows.Window)">
            <summary>
            Construct a new wrapper taking a WPF window.
            </summary>
            <param name="window">The WPF window to wrap.</param>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.WindowWrapper.Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            <returns>A handle to the window represented by the implementer.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LogViewer.Model.PatternColor`1" -->
        <member name="M:LogViewer.Model.PatternColor`1.#ctor(System.Collections.Generic.Dictionary{System.Int32,LogViewer.Model.KeyIndexRecordPair{System.Int32,System.String,System.Int32,`0,System.String}},System.Collections.Generic.List{LogViewer.Model.KeyIndexRecordPair{System.Int32,System.String,System.Int32,`0,System.String}})">
            <summary>
            Initializes a new instance of the PatternColor class.
            </summary>
        </member>
        <member name="T:LogViewer.WindowViewModelMapping.WindowViewModelMappings">
            <summary>
            Class describing the Window-ViewModel mappings used by the dialog service.
            </summary>
        </member>
        <member name="M:LogViewer.WindowViewModelMapping.WindowViewModelMappings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogViewer.WindowViewModelMapping.WindowViewModelMappings"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.WindowViewModelMapping.WindowViewModelMappings.GetWindowTypeFromViewModelType(System.Type)">
            <summary>
            Gets the window type based on registered ViewModel type.
            </summary>
            <param name="viewModelType">The type of the ViewModel.</param>
            <returns>The window type based on registered ViewModel type.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.EditPatternSettingViewModel">
            <summary>
            Class provides methods for editing pattern setting item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditPatternSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.PatternItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.AddItemSettingCL">
            <summary>
            Add pattern setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.CreateNewAndSetCandidateDefaultValue">
            <summary>
            Create new blank pattern setting item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.IsEdit">
            <summary>
            Get status of editing pattern item
            </summary>
            <returns>True: editing; False: not current editing</returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.IsAdd">
            <summary>
            Get status of adding key of pattern item
            </summary>
            <returns>True: editing; False: not current editing</returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.EditItemSettingCL">
            <summary>
            Edit keys of pattern item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.ValidateData">
            <summary>
            Validate keys of pattern item
            </summary>
            <returns>True: valid, False: not valid</returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.CloseDialog">
            <summary>
            Close dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EditPatternSettingViewModel.dialog_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Close dialog
            </summary>
            <param name="sender">The sender object</param>
            <param name="e"><see cref="!:CancelEventArgs"/></param>
        </member>
        <member name="P:LogViewer.ViewModel.EditPatternSettingViewModel.ErrorMessage">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditPatternSettingViewModel.CanApply">
            <summary>
            Get status of applying
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditPatternSettingViewModel.EditItemSettingCommand">
            <summary>
            Command interface for editing item setting
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.FolderBrowserDialogViewModel">
            <summary>
            Class provides method for Open Folder Browser Dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.FolderBrowserDialogViewModel.ShowDialog(System.Object)">
            <summary>
            Show dialog
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>OK or Cancel</returns>
        </member>
        <member name="P:LogViewer.ViewModel.FolderBrowserDialogViewModel.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FolderBrowserDialogViewModel.SelectedPath">
            <summary>
            Selected path
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.FolderBrowserDialogViewModel.ShowNewFolderButton">
            <summary>
            Show new folder button
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.LogBookmarkTabViewModel`1">
            <summary>
            Class provides method for bookmark tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.#ctor(System.Action{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="onShowRecord">Action show record</param>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.AddBookmark(`0)">
            <summary>
            Add a bookmark to bookmark list
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.RemoveBookmark(`0)">
            <summary>
            Remove a bookmark in bookmark list
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.LoadData(System.Collections.Generic.IList{`0})">
            <summary>
            Load data to bookmark tab
            </summary>
            <param name="data">List user action result </param>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.ResetBookmark">
            <summary>
            Reset bookmark tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.IsEnableCopy">
            <summary>
            Check can execute copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogViewer.ViewModel.LogBookmarkTabViewModel`1.CopyCommandCL">
            <summary>
            Function callback when click copy menu item
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.LogBookmarkTabViewModel`1.OnShowRecord">
            <summary>
            Action show record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogBookmarkTabViewModel`1.DoubleClickedRecord">
            <summary>
            Set property double clicked record bookmark
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogBookmarkTabViewModel`1.LogRecordList">
            <summary>
            Get or set list bookmark record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogBookmarkTabViewModel`1.SelectedItems">
            <summary>
            Get or set SelectedItems
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogBookmarkTabViewModel`1.IsShowTabBookmark">
            <summary>
            Get or set IsShowTabBookmark
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.LogBookmarkTabViewModel`1.CopyCommand">
            <summary>
            Get or set command for copy menu item
            </summary>
        </member>
        <member name="T:LogViewer.Model.UserActionItem">
            <summary>
            Model class for storing information of user action item
            </summary>
        </member>
        <member name="P:LogViewer.Model.UserActionItem.ID">
            <summary>
            Get or set id
            </summary>
        </member>
        <member name="P:LogViewer.Model.UserActionItem.RefSystemLog">
            <summary>
            Get or set reference system log
            </summary>
        </member>
        <member name="P:LogViewer.Model.UserActionItem.UserAction">
            <summary>
            Get or set string message (user action)
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CXDIParser">
            <summary>
            Class provides methods for extracting data from CXDI log file.
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.ParserFromFile(System.String)">
            <summary>
            Parse CXDI log file.
            </summary>
            <param name="filePath">The path of log file</param>
            <returns>This hold records of log file, bookmark and comment.
            </returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.GetFirmware(System.String)">
            <summary>
            Extract firmware from log file.
            </summary>
            <param name="filePath">Location log file</param>
            <returns><see cref="T:LogViewer.Model.CXDIFirmware"/></returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.GetFirmware(System.IO.StringReader)">
            <summary>
            Extract firmware from log file.
            </summary>
            <param name="reader">Content of log file <see cref="T:System.IO.StringReader"/></param>
            <returns><see cref="T:LogViewer.Model.CXDIFirmware"/></returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.ParserFromFile(System.IO.StringReader)">
            <summary>
            Load all log record from a log builder.
            </summary>
            <param name="reader">The string reader was used to read log record</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.IsCxdIlogType(System.String)">
            <summary>
            Check for given file by filePath is CXDI log file or not
            </summary>
            <param name="filePath">The path of given log file</param>
            <returns>True: if the give file is CXDI, otherwise is false.</returns>
        </member>
        <member name="M:LogViewer.Business.FileParser.CXDIParser.IsCxdIlogType(System.IO.StringReader)">
            <summary>
            Check for given file by filePath is CXDI log file or not
            </summary>
            <param name="reader">Hold log data in StringReader object</param>
            <returns>True: if the give file is CXDI, otherwise is false.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.SetLogDisplayViewModel">
            <summary>
            View model for show SetLogDisplay window
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.SetLogDisplayViewModel._ccsDisplaySettings">
            <summary>
            Get or set CCSDisplaySettings
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.SetLogDisplayViewModel._cxdiDisplaySettings">
            <summary>
            Get or set CXDIDisplayLogSettings
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SetLogDisplayViewModel.#ctor(System.Action{System.Collections.Generic.List{System.Collections.Generic.List{LogViewer.Model.LogDisplay}}})">
            <summary>
            Initializes a new instance of the SetLogDisplayViewModel class.
            </summary>
            <param name="onApplyLogDisplay">Action run when click button Apply</param>
        </member>
        <member name="M:LogViewer.ViewModel.SetLogDisplayViewModel.LoadData(System.Collections.Generic.List{LogViewer.Model.LogDisplay},System.Collections.Generic.List{LogViewer.Model.LogDisplay})">
            <summary>
            Load data when show window SetLogDisplay
            </summary>
            <param name="ccsDisplaySettings">List LogDislay of CCS</param>
            <param name="cxdiDisplaySettings">List LogDisplay of CXDI</param>
        </member>
        <member name="M:LogViewer.ViewModel.SetLogDisplayViewModel.GetDataToApply">
            <summary>
            Get Data to apply
            </summary>
            <returns></returns>
        </member>
        <member name="F:LogViewer.ViewModel.SetLogDisplayViewModel._errorMessage">
            <summary>
            Get or set Error message
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetLogDisplayViewModel.CanApply">
            <summary>
            Check button apply can execute or not
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.EditGraphParamSettingViewModel">
            <summary>
            Class provides methods for editing graph parameters
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditGraphParamSettingViewModel.#ctor(System.Action{System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditGraphParamSettingViewModel.GetDataToApply">
            <summary>
            Get list of <see cref="T:LogViewer.Business.GraphParamSetting"/>
            </summary>
            <returns>List of <see cref="T:LogViewer.Business.GraphParamSetting"/></returns>
        </member>
        <member name="M:LogViewer.ViewModel.EditGraphParamSettingViewModel.LoadParam(System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting})">
            <summary>
            Log parameter to <see cref="P:LogViewer.ViewModel.EditGraphParamSettingViewModel.ParameterDataGridVM"/>
            </summary>
            <param name="graphParamSetting">List of <see cref="T:LogViewer.Business.GraphParamSetting"/></param>
        </member>
        <member name="P:LogViewer.ViewModel.EditGraphParamSettingViewModel.ParameterDataGridVM">
            <summary>
            Get or set <see cref="T:LogViewer.ViewModel.ParameterDataGridViewModel"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditGraphParamSettingViewModel.EventDataGridVM">
            <summary>
            Get or set <see cref="T:LogViewer.ViewModel.EventDataGridViewModel"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.EditGraphParamSettingViewModel.CanApply">
            <summary>
            Use for checking can the parameter data grid view model can applying or not
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialogViewModel">
            <summary>
            ViewModel of the OpenFileDialog.
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.OpenFile.OpenFileDialogViewModel.Multiselect">
            <summary>
            Gets or sets a value indicating whether the dialog box allows multiple files to be selected.
            </summary>
        </member>
        <member name="T:LogViewer.Model.RecentFileAction">
            <summary>
            Model class for storing information of recent file.
            </summary>
        </member>
        <member name="F:LogViewer.Model.RecentFileAction.FilePath">
            <summary>
            File location
            </summary>
        </member>
        <member name="F:LogViewer.Model.RecentFileAction.RecentActionLoadCCS">
            <summary>
            Recent action for CCS
            </summary>
        </member>
        <member name="F:LogViewer.Model.RecentFileAction.RecentActionLoadCXDI">
            <summary>
            Recent action for CXDI
            </summary>
        </member>
        <member name="M:LogViewer.Model.RecentFileAction.#ctor(System.String,System.Action{System.String},System.Action{System.String})">
            <summary>
            Initializes a new instance of the RecentFile class.
            </summary>
        </member>
        <member name="T:LogViewer.Model.AnalyzedCountKeywordItem">
            <summary>
            Class provide method for holding keyword count info
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedCountKeywordItem.Name">
            <summary>
            Get or set name of keyword count
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedCountKeywordItem.Count">
            <summary>
            Get or set number of found keyword 
            </summary>
        </member>
        <member name="T:LogViewer.View.SearchKeywordView">
            <summary>
            Interaction logic for SearchWindow.xaml
            </summary>
            <summary>
            SearchKeywordView
            </summary>
        </member>
        <member name="M:LogViewer.View.SearchKeywordView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.LogDisplaySettingView">
            <summary>
            Interaction logic for LogDisplaySettingView.xaml
            </summary>
            <summary>
            LogDisplaySettingView
            </summary>
        </member>
        <member name="M:LogViewer.View.LogDisplaySettingView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.SearchKeywordViewModel">
            <summary>
            Class provides method for search keyword
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.SearchKeywordViewModel._ccsResultVM">
            <summary>
            CCS result
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.SearchKeywordViewModel._cxdiResultVM">
            <summary>
            CXDI result
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.#ctor(System.Func{LogViewer.Model.SearchItem,System.Collections.Generic.IList{LogViewer.Model.CCSLogRecord}},System.Func{LogViewer.Model.SearchItem,System.Collections.Generic.IList{LogViewer.Model.CXDILogRecord}},System.Action{LogViewer.Model.CCSLogRecord},System.Action{LogViewer.Model.CXDILogRecord})">
            <summary>
            Default constructor
            </summary>
            <param name="onSearchCCSEvent">Action search CCS</param>
            <param name="onSearchCXDIEvent">Action Search CXDI</param>
            <param name="onShowCCSRecordEvent">Action show CCS log record</param>
            <param name="onShowCXDIRecordEvent">Action show CXDI log record</param>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.Search">
            <summary>
            Function search in log using search string
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.InitChildViewModels">
            <summary>
            Initialize child view model
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.init">
            <summary>
            Initialize when open search window
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.clearCCS">
            <summary>
            Clear CCS result tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SearchKeywordViewModel.clearCXDI">
            <summary>
            Clear CXDI result tab
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.SearchKeywordViewModel.OnSearchCCSEvent">
            <summary>
            Event search CCS log
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.SearchKeywordViewModel.OnSearchCXDIEvent">
            <summary>
            Event search CXDI log
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.SearchKeywordViewModel.OnShowCCSRecordEvent">
            <summary>
            event show CCS log record
            </summary>
        </member>
        <member name="E:LogViewer.ViewModel.SearchKeywordViewModel.OnShowCXDIRecordEvent">
            <summary>
            event show CXDI log record
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.LogKindTargetList">
            <summary>
            Collect log kind target
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.SelectedLogKindTarget">
            <summary>
            Selected log kind target
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.SearchResultVMList">
            <summary>
            Collect search result View Model
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.SelectedSearchResultVM">
            <summary>
            Selected search result view model
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.SearchString">
            <summary>
            String search
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SearchKeywordViewModel.SearchCommand">
            <summary>
            Register Search command
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CXDILogRecordDisplayViewModel">
            <summary>
            Class provides method display CXDI log record
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1">
            <summary>
            Base class provides common methods for display log record
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1._data">
            <summary>
            Base log record data
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.IsViewModelOf(`0)">
            <summary>
            Check type of data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1._ownerVM">
            <summary>
            Parent view model
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.#ctor(`0,LogViewer.ViewModel.ILogsDisplayContainer{`0})">
            <summary>
            Default Constructor
            </summary>
            <param name="data">Base log record</param>
            <param name="ownerVM">Parent view model</param>
        </member>
        <member name="M:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.BookmarkCL">
            <summary>
            Callback when add bookmark
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.Line">
            <summary>
            Get line of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.Data">
            <summary>
            Get base log record data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.Date">
            <summary>
            Get Date of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.Time">
            <summary>
            Get Time of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.FilterSetting">
            <summary>
            Get filter item setting list
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.PatternColor">
            <summary>
            Get pattern color of parent
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.IsBookmarked">
            <summary>
            Get or set bookmark status
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.Comment">
            <summary>
            Get or set Comment
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.BaseLogRecordDisplayViewModel`1.BookmarkCommand">
            <summary>
            Get bookmark command
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDILogRecordDisplayViewModel.#ctor(LogViewer.Model.CXDILogRecord,LogViewer.ViewModel.ILogsDisplayContainer{LogViewer.Model.CXDILogRecord})">
            <summary>
            Default Constructor
            </summary>
            <param name="data">CXDI log record</param>
            <param name="ownerVM">Parent view model</param>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogRecordDisplayViewModel.Module">
            <summary>
            Get module of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CXDILogRecordDisplayViewModel.Message">
            <summary>
            Get message of data
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.CCSLogRecordDisplayViewModel">
            <summary>
            Class provides method display CCS log record
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.#ctor(LogViewer.Model.CCSLogRecord,LogViewer.ViewModel.ILogsDisplayContainer{LogViewer.Model.CCSLogRecord})">
            <summary>
            Default Constructor
            </summary>
            <param name="data">CCS log record</param>
            <param name="ownerVM">Parent view model</param>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.HostName">
            <summary>
            Get host name of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.ThreadId">
            <summary>
            Get thread id of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.Type">
            <summary>
            Get type of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.Id">
            <summary>
            Get id of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.Content">
            <summary>
            Get content of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.PersonalInfo">
            <summary>
            Get personal information of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.AdditionalInfo">
            <summary>
            Get additional information of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.ClassName">
            <summary>
            Get class name of data
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.CCSLogRecordDisplayViewModel.Mode">
            <summary>
            Get mode of data
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.PatternTabViewModel`1">
            <summary>
            Class provides method for pattern analyze tab
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.PatternTabViewModel`1.StopPatternAnalyzed">
            <summary>
            Action stop analyze pattern
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternTabViewModel`1.#ctor(System.Action{`0,LogViewer.Model.AnalyzedPatternResultItem{`0}},System.Action)">
            <summary>
            Default Constructor
            </summary>
            <param name="onShowRecord">Action show record</param>
            <param name="stopPatternAnalyzed">Action stop analyze pattern</param>
        </member>
        <member name="M:LogViewer.ViewModel.PatternTabViewModel`1.CancelPatternAnalyzedCL">
            <summary>
            Function when cancel analyze pattern
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternTabViewModel`1.ClearData">
            <summary>
            Clear data in pattern analyze tab
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternTabViewModel`1.LoadData(System.Collections.Generic.IList{LogViewer.Model.AnalyzedPatternResultItem{`0}})">
            <summary>
            Load data to pattern analyze tab
            </summary>
            <param name="data">List analyze pattern result</param>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.DoubleClickedRecord">
            <summary>
            Set property DoubleClickedRecord
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.DoubleClickedPatternResultItem">
            <summary>
            Set property DoubleClickedPatternResultItem
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.IsLoadingData">
            <summary>
            Get or set IsLoadingData
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.CancelPatternAnalyzed">
            <summary>
            Get or set CancelPatternAnalyzed command
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.PatternRecordList">
            <summary>
            Get or set pattern analyze result list
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.IsShowTabPattern">
            <summary>
            Get or set IsShowTabPattern
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternTabViewModel`1.CurrentPatternItem">
            <summary>
            Get or set CurrentPatternItem
            </summary>
        </member>
        <member name="T:LogViewer.Model.LogDisplay">
            <summary>
            Model class for storing information of log display parameter
            </summary>
        </member>
        <member name="M:LogViewer.Model.LogDisplay.ValidDate(System.Collections.Generic.List{LogViewer.Model.LogDisplay})">
            <summary>
            Valid input data for log display item
            </summary>
            <param name="logDisplayHeader">List of system log display item. <seealso cref="M:LogViewer.Model.ConfigValue.SystemCCSLogSetting"/></param>
            <returns>True: if item is valid; False: is otherwise</returns>
        </member>
        <member name="P:LogViewer.Model.LogDisplay.key">
            <summary>
            Get or set key
            </summary>
        </member>
        <member name="P:LogViewer.Model.LogDisplay.value">
            <summary>
            Get or set value
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.SetFontStyleDialogViewModel">
            <summary>
            ViewModel show select font style dialog
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SetFontStyleDialogViewModel.#ctor(System.Action{System.String},System.String)">
            <summary>
            Initializes a new instance of the SetFontStyleDialogViewModel class.
            </summary>
            <param name="onApplyEvent">Action run when click button apply</param>
            <param name="defaultValue">default Value when initialize</param>
        </member>
        <member name="F:LogViewer.ViewModel.SetFontStyleDialogViewModel._allFontStyle">
            <summary>
            Get or set AllFontStyle property
            </summary>
        </member>
        <member name="F:LogViewer.ViewModel.SetFontStyleDialogViewModel._selectedValue">
            <summary>
            Get or set SelectedValue
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.SetFontStyleDialogViewModel.GetDataToApply">
            <summary>
            Get Data to Apply
            </summary>
            <returns></returns>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialogViewModel">
            <summary>
            Model class provides properties for saving file
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialogViewModel.FileName">
            <summary>
            Get or set file name
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialogViewModel.DefaultExt">
            <summary>
            Get or set default extension
            </summary>
        </member>
        <member name="P:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialogViewModel.Filter">
            <summary>
            Get or set filter string
            </summary>
        </member>
        <member name="T:LogViewer.Model.SearchItem">
            <summary>
            Model class for storing information of search item.
            </summary>
        </member>
        <member name="P:LogViewer.Model.SearchItem.StringValue">
            <summary>
            Get or set search value
            </summary>
        </member>
        <member name="P:LogViewer.Model.SearchItem.LogItem">
            <summary>
            Get or set column name of log record that will be search on.
            </summary>
        </member>
        <member name="T:LogViewer.Model.Saved">
            <summary>
            Model class for storing information of saved of firmware <seealso cref="T:LogViewer.Model.CXDIFirmware"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.Saved.parameter">
            <summary>
            Get or set parameter
            </summary>
        </member>
        <member name="P:LogViewer.Model.Saved.value">
            <summary>
            Get or set value
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.SwitchCase">
            <summary>
            An individual case in the switch statement.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.SwitchCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwitchCase"/> class.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.SwitchCase.WhenProperty">
            <summary>
            Dependency property for the <see cref="P:When"/> property.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.SwitchCase.ThenProperty">
            <summary>
            Dependency property for the <see cref="P:Then"/> property.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchCase.When">
            <summary>
            The value to match against the input value.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.SwitchCase.Then">
            <summary>
            The output value to use if the current case matches.
            </summary>
        </member>
        <member name="T:LogViewer.Model.KeyIndexRecordPair`5">
            <summary>
            Model class for storing key found when analyze pattern. <seealso cref="!:AnalyzePattern"/>
            </summary>
            <typeparam name="TLine">Line of generic log record, the log record can be <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
            <typeparam name="TKey">Key of generic log record, the log record can be <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
            <typeparam name="TIndex">Level of key</typeparam>
            <typeparam name="TRecord">Generic log record, the log record can be <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
            <typeparam name="TColor">Color of generic log record, the log record can be <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
        </member>
        <member name="M:LogViewer.Model.KeyIndexRecordPair`5.#ctor(`0,`1,`2,`3)">
            <summary>
            Default constructor
            </summary>
            <param name="line"><see cref="!:TLine"/></param>
            <param name="key"><see cref="!:TKey"/></param>
            <param name="index"><see cref="!:TIndex"/></param>
            <param name="record"><see cref="!:TRecord"/></param>
        </member>
        <member name="M:LogViewer.Model.KeyIndexRecordPair`5.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeyIndexRecordPair`5.Line">
            <summary>
            Get or set line <seealso cref="!:TLine"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeyIndexRecordPair`5.Key">
            <summary>
            Get or set key <seealso cref="!:TKey"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeyIndexRecordPair`5.Index">
            <summary>
            Get or set index <seealso cref="!:TIndex"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeyIndexRecordPair`5.Record">
            <summary>
            Get or set record <seealso cref="!:TRecord"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeyIndexRecordPair`5.Color">
            <summary>
            Get or set color <seealso cref="!:TColor"/>
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileParser.CCSMemoParserOld">
            <summary>
            Class provides methods for parsing from or writing to an XML memo log file. This class support for CCS Old version
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.Business.FileParser.CCSMemoParserOld.ParserFromFile(System.String)" -->
        <member name="M:LogViewer.Business.FileParser.CCSMemoParserOld.WriteMemoLogFile(System.String)">
            <summary>
            Export log records, comments and bookmarks to memo long in an XML file.
            </summary>
            <param name="filePath">location of an XML file</param>
        </member>
        <member name="T:LogViewer.CustomException.DataValueNotSupportedException">
            <summary>
            Exception class provide method for throwing not support exception <seealso cref="!:FontStyleHelper"/>
            </summary>
        </member>
        <member name="P:LogViewer.CustomException.DataValueNotSupportedException.Message">
            <summary>
            Throw message <see cref="P:LogViewer.Properties.Resources.DATA_VALUE_NOT_SUPPORTED_EXCEPTION_MESSAGE"/>
            </summary>
        </member>
        <member name="T:LogViewer.View.ExportFileNameDialogView">
            <summary>
            Interaction logic for ExportFileNameDialogView.xaml
            </summary>
            <summary>
            ExportFileNameDialogView
            </summary>
        </member>
        <member name="M:LogViewer.View.ExportFileNameDialogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.PatternItemViewModel">
            <summary>
            Class provides methods for setting pattern item
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemViewModel.#ctor(System.Action{LogViewer.Business.PatternItemSetting})">
            <summary>
            Default constructor
            </summary>
            <param name="onApplyAction"><see cref="T:System.Action"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemViewModel.LoadItem(LogViewer.Business.PatternItemSetting)">
            <summary>
            Load pattern setting item
            </summary>
            <param name="data"><see cref="T:LogViewer.Business.PatternItemSetting"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.PatternItemViewModel.GetDataToApply">
            <summary>
            Get or set <see cref="T:LogViewer.Business.PatternItemSetting"/>
            </summary>
            <returns><see cref="T:LogViewer.Business.PatternItemSetting"/></returns>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.CanApply">
            <summary>
            Get status of can apply
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.KeysListDataGridVM">
            <summary>
            Get or set <see cref="T:LogViewer.ViewModel.PatternItemKeysListDataGridViewModel"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:LogViewer.ViewModel.PatternItemViewModel.TimeUnitList" -->
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.Title">
            <summary>
            Get or set title
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.RootKeyword">
            <summary>
            Get or set root keyword
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.Time">
            <summary>
            Get or set time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.TimeUnit">
            <summary>
            Get or set time unit
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.IsErrorAtTime">
            <summary>
            Get or set error status of time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.Error">
            <summary>
            Get error message
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.PatternItemViewModel.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.CXDIAnalyzeAreaViewModel">
            <summary>
            Class provides methods for CXDI analyze area log
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.CXDIAnalyzeAreaViewModel.#ctor(System.Action{LogViewer.Model.CXDILogRecord},System.Action{LogViewer.Model.CXDILogRecord,LogViewer.Model.AnalyzedPatternResultItem{LogViewer.Model.CXDILogRecord}},System.Action,System.Action)">
            <summary>
            Default Constructor
            </summary>
            <param name="onShowLogRecord">Action show log record</param>
            <param name="onShowPatternColoringRecord">Action show pattern coloring</param>
            <param name="onStopCountKeyword">Action stop count keyword</param>
            <param name="onStopPatternAnalyzed">Action stop pattern analyze</param>
        </member>
        <member name="P:LogViewer.ViewModel.CXDIAnalyzeAreaViewModel.FirmwareInfoTabVM">
            <summary>
            Get or set firmware tab
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.SetRangeOfGraphViewModel">
            <summary>
            Class provides method for setting range parameter for graph
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.SetRangeOfGraphViewModel.#ctor(System.Action{LogViewer.Business.GraphRangeSetting})" -->
        <member name="M:LogViewer.ViewModel.SetRangeOfGraphViewModel.GetDataToApply">
            <summary>
            Get <see cref="T:LogViewer.Business.GraphRangeSetting"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.Setting">
            <summary>
            Get or set <see cref="T:LogViewer.Business.GraphRangeSetting"/>
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.From">
            <summary>
            Get or set From date
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.To">
            <summary>
            Get or set To date
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.Min">
            <summary>
            Get or set Min range
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.Max">
            <summary>
            Get or set Max range
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.FirstYRangeFrom">
            <summary>
            Get or set From range of the first Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.FirstYRangeTo">
            <summary>
            Get or set To range of the first Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.SecondYRangeFrom">
            <summary>
            Get or set From range of the second Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.SecondYRangeTo">
            <summary>
            Get or set To range of the second Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsErrorAtFirstYRangeFrom">
            <summary>
            Get or set error status of From value of the first Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsErrorAtFirstYRangeTo">
            <summary>
            Get or set error status of To value of the first Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsErrorAtSecondYRangeTo">
            <summary>
            Get or set error status of To value of the second Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsErrorAtSecondYRangeFrom">
            <summary>
            Get or set error status of From value of the second Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.ErrorMessage">
            <summary>
            Get or set error message
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsValidFirstYRange">
            <summary>
            Get valid range status of the first Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsValidSecondYRange">
            <summary>
            Get valid range status of the second Y axis
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.IsValidDateTime">
            <summary>
            Get valid status of date time
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.SetRangeOfGraphViewModel.CanApply">
            <summary>
            Get status of can apply
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.OK">
            <summary>
            OK text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.Cancel">
            <summary>
            Cancel text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.Abort">
            <summary>
            Abort text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.Retry">
            <summary>
            Retry text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.Ignore">
            <summary>
            Ignore text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.Yes">
            <summary>
            Yes text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.No">
            <summary>
            No text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Register">
            <summary>
            Enables MessageBoxManager functionality
            </summary>
            <remarks>
            MessageBoxManager functionality is enabled on current thread only.
            Each thread that needs MessageBoxManager functionality has to call this method.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Unregister">
            <summary>
            Disables MessageBoxManager functionality
            </summary>
            <remarks>
            Disables MessageBoxManager functionality on current thread only.
            </remarks>
        </member>
        <member name="F:LogViewer.MVVMHelper.DataPiping.DataPipesProperty">
            <summary>
            Dependency property for the <see cref="P:DataPipes"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataPiping.SetDataPipes(System.Windows.DependencyObject,LogViewer.MVVMHelper.DataPipeCollection)">
            <summary>
            Set property DataPipes
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataPiping.GetDataPipes(System.Windows.DependencyObject)">
            <summary>
            Get property DataPipes
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DataPipe.SourceProperty">
            <summary>
            Dependency property for the <see cref="P:Source"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataPipe.OnSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On Source Changed.
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DataPipe.OnSourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On Source Changed.
            <param name="e">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DataPipe.TargetProperty">
            <summary>
            Dependency property for the <see cref="P:Target"/> property.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataPipe.Source">
            <summary>
            The value to match against the input value.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.DataPipe.Target">
            <summary>
            The value to match against the input value.
            </summary>
        </member>
        <member name="T:LogViewer.Business.FileSetting.CXDISettingManager">
            <summary>
            Class provides methods for manager CXDI setting file
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.#ctor">
            <summary>
             Default constructor
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.ReadGraphParamSetting">
            <summary>
            Read parameter from setting file for displaying graph. The parameter file path is got from <see cref="P:LogViewer.Business.FileSetting.CXDISettingManager.UserGraphParramSettingFilePath"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.WriteGraphParamSetting">
            <summary>
            Read parameter from setting file for displaying graph. The parameter file path is got from <see cref="P:LogViewer.Business.FileSetting.CXDISettingManager.UserGraphParramSettingFilePath"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.BuildNode(System.Xml.XmlDocument,System.Collections.Generic.List{LogViewer.Business.GraphParamSetting},System.Xml.XmlNode)">
            <summary>
            Use to build list of node inside parent node
            </summary>
            <param name="doc">XMl document object</param>
            <param name="paramList">List of parameter item</param>
            <param name="parentNode">the node that hold all child node</param>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.InitSystemLogDisplaySetting">
            <summary>
            Initialize for log display settings, the list of display setting is got from <see cref="M:LogViewer.Model.ConfigValue.SystemCXDILogSetting"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.GetSystemConfig">
            <summary>
            Get log display settings, the list of display setting is got from <see cref="M:LogViewer.Model.ConfigValue.SystemCXDILogSetting"/>
            </summary>
        </member>
        <member name="M:LogViewer.Business.FileSetting.CXDISettingManager.GetLogHeader">
            <summary>
            Get log header list for CXDI log file, the list of log header is got from <see cref="P:LogViewer.Model.ConfigValue.CXDIHeader.AllLogField"/>
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.UserGraphParramSettingFilePath">
            <summary>
            Get the path of setting file for graph parameter
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.GraphParamSettingList">
            <summary>
            Get or set parameter for graph
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.BasePatternSettingFilePath">
            <summary>
            Get path of user pattern setting file, if the path is not exists the default pattern setting file will be use, 
            if the default pattern setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.UserPatternSettingFilePath">
            <summary>
            Get or set the path of user pattern setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.BaseFilterSettingFilePath">
            <summary>
            Get path of user filter setting file, if the path is not exists the default filter setting file will be use, 
            if the default filter setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.UserFilterSettingFilePath">
            <summary>
            Get or set the path of user filter setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.BaseKeywordCountSettingFilePath">
            <summary>
            Get path of user keyword count setting file, if the path is not exists the default keyword count setting file will be use, 
            if the default keyword count setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.UserKeywordCountSettingFilePath">
            <summary>
            Get or set the path of user keyword count setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.BaseLogDisplaySettingFilePath">
            <summary>
            Get path of user log display setting file, if the path is not exists the default log display setting file will be use, 
            if the default log display setting file is not exist, this method will throw <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.UserLogDisplaySettingFilePath">
            <summary>
            Get or set the path of user log display setting file.
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.DefaultLogDisplaySettingFilePath">
            <summary>
            Initial log display setting if user or default log display setting file is not exists
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.DefaultPatternSettingFilePath">
            <summary>
            Get the path of default pattern count setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.DefaultFilterSettingFilePath">
            <summary>
            Get the path of default filter setting file
            </summary>
        </member>
        <member name="P:LogViewer.Business.FileSetting.CXDISettingManager.DefaultKeywordCountSettingFilePath">
            <summary>
            Get the path of default keyword count setting file
            </summary>
        </member>
        <member name="T:LogViewer.Model.AnalyzedUserActionItem">
            <summary>
            Model class for storing result of user action.
            </summary>
        </member>
        <member name="M:LogViewer.Model.AnalyzedUserActionItem.#ctor(LogViewer.Model.UserActionItem,LogViewer.Model.CCSLogRecord)">
            <summary>
            Default constructor
            </summary>
            <param name="action"><see cref="T:LogViewer.Model.UserActionItem"/></param>
            <param name="record"><see cref="T:LogViewer.Model.CCSLogRecord"/></param>
        </member>
        <member name="P:LogViewer.Model.AnalyzedUserActionItem.Record">
            <summary>
            Get or set <see cref="T:LogViewer.Model.CCSLogRecord"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedUserActionItem.Line">
            <summary>
            Get line of record
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedUserActionItem.Date">
            <summary>
            Get date of record
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedUserActionItem.Time">
            <summary>
            Get time of record
            </summary>
        </member>
        <member name="P:LogViewer.Model.AnalyzedUserActionItem.UserAction">
            <summary>
            Get user action
            </summary>
        </member>
        <member name="T:LogViewer.ViewModel.MessageBoxViewModel">
            <summary>
            Class provides method for message box
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.MessageBoxViewModel.ShowDialog(System.Object)">
            <summary>
            Show dialog
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>Ok or Cancel</returns>
        </member>
        <member name="M:LogViewer.ViewModel.MessageBoxViewModel.ShowDialogDelete(System.Object)">
            <summary>
            Show dialog for delete message
            </summary>
            <param name="ownerWindowVM">Parent window</param>
            <returns>OK or Cancel</returns>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxViewModel.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxViewModel.Caption">
            <summary>
            Capitan
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxViewModel.ButtonValue">
            <summary>
            Button value
            </summary>
        </member>
        <member name="P:LogViewer.ViewModel.MessageBoxViewModel.ImageValue">
            <summary>
            Image value
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.UniversalValueConverter">
            <summary>
            Universal Value Converter
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.UniversalValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert key to string
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Return self if cannot convert</returns>
        </member>
        <member name="T:LogViewer.Model.KeywordCountResultItem">
            <summary>
            Model class for storing key word count result item.
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeywordCountResultItem.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:LogViewer.Model.KeywordCountResultItem.Count">
            <summary>
            Get or set number or found keyword
            </summary>
        </member>
        <member name="T:LogViewer.Business.CXDILogsAnalyser">
            <summary>
            Class provides methods for analyzing CXDI log data
            </summary>
        </member>
        <member name="T:LogViewer.Business.BaseLogsAnalyser`1">
            <summary>
            Base class for log analyze which provide common method for analyze log data.
            </summary>
            <typeparam name="T">Generic class, can be: <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.SearchKeyword(LogViewer.Model.ILogItemSearch)">
            <summary>
            Use to search log record by a search item object. Search Item object have 2 properties:
            logItem and stringvalue, both of them must be set for searching. 
            </summary>
            <param name="searchItem">Two values must be set for searching:logItem and stringvalue, 
            by passing through searchItem object</param>
            <returns>A list of filtered log records</returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.Filter(System.Collections.Generic.IList{LogViewer.Business.FilterItemSetting})">
            <summary>
            Use to filter all log records matched with filter conditions.
            </summary>
            <param name="filterItemSetting">The list of filter conditions</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.CountKeyword(System.Collections.Generic.IList{LogViewer.Business.KeywordCountItemSetting})">
            <summary>
            Use to analyze the amount of keywords in log record buffer
            </summary>
            <param name="setttingItems">The keyword list used to analyzing</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.GetColumnValue(`0,System.String)">
            <summary>
            Abstract method for getting value of a column of log record.
            </summary>
            <param name="record">Generic log record, that can be <see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see> or <see cref="T:LogViewer.Model.CXDILogRecord"/> </param>
            <param name="logItem">Name of column of log record</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.GetFilterItemProxy(LogViewer.Business.KeywordCountItemSetting)">
            <summary>
            Abstract method, for creating <see cref="T:LogViewer.Model.FilterItemProxy">FilterItemProxy</see> 
            </summary>
            <param name="keyword"><see cref="T:LogViewer.Business.KeywordCountItemSetting">KeywordCountItemSetting</see></param>
            <returns><see cref="T:LogViewer.Model.FilterItemProxy">FilterItemProxy</see></returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.WriteMemo(System.String)">
            <summary>
            Use to export log file to memo log file
            </summary>
            <param name="filePath">Location of exporting file</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.GetRecordFileName(`0)">
            <summary>
            Get the file name of a record.
            </summary>
            <param name="record">Generic log record (<see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see>, <see cref="T:LogViewer.Model.CXDILogRecord">CXDILogRecord</see>)</param>
            <returns>File name of file contain that record.</returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.CanMerge(System.String)">
            <summary>
            For checking if current file can merge with the olds
            </summary>
            <param name="filePath">Location of file</param>
            <returns>True: allow merge; False: do not allow merge.</returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.LoadLogFile(System.String,System.Boolean)">
            <summary>
            Load all log record from log file.
            </summary>
            <param name="filePath">The log record's file path</param>
            <param name="isAdd">The variable used to check either old log record buffer
            was replaced or merged with new one</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.LoadMemoLogFile(System.String)">
            <summary>
            Load all log memo from memo log file.
            </summary>
            <param name="filePath">The memo log's file path</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.WriteMemoLogFile(System.String)">
            <summary>
            Writes memo log to file.
            </summary>
            <param name="filePath">The output file's path</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.AddBookmark(`0)">
            <summary>
            Save log record as bookmark state.
            </summary>
            <param name="record">Record will be bookmarked</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.RemoveBookmark(`0)">
            <summary>
            Remove record from bookmark state.
            </summary>
            <param name="record">The record will not bookmarked</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.ClearOldValue(System.Boolean)">
            <summary>
            Clear old value of all fields
            </summary>
            <param name="isAdd">The variable used to mark replacing or merging state 
            of log record buffer</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.ClearMemo">
            <summary>
            Clear comments and bookmarks buffer.
            </summary>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.ClearBookmark">
            <summary>
            Clear bookmark buffer
            </summary>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.ClearComment">
            <summary>
            Clear comment buffer
            </summary>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.AnalyzePattern(System.Collections.Generic.IList{LogViewer.Business.PatternItemSetting})">
            <summary>
            Find the records by root keyword, from this record find in forward in range Time by others keyword.
            The condition search of keyword base on content/message column of log file.
            </summary>
            <param name="patternItemSettings">List of PatternItemSetting</param>
        </member>
        <member name="M:LogViewer.Business.BaseLogsAnalyser`1.GetColumnContentValue(`0)">
            <summary>
            Get value of content column of log record
            </summary>
            <param name="record">Generic log record, that can be <see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see> or <see cref="T:LogViewer.Model.CXDILogRecord">CCSLogRecord</see></param>
            <returns>value of content column</returns>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.KeywordCountWorker">
            <summary>
            Get of Set BackgroundWorker. Use to cancel waste time of analyzing process.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.AllLogRecordsFilePaths">
            <summary>
            Get list of file name of log file had loaded.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.AllLogRecordsBuffer">
            <summary>
            Get list of all log records had loaded.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.FilteredLogRecordsBuffer">
            <summary>
            Get list of all filtered log records.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.SearchKeywordBuffer">
            <summary>
            Get list of record, that is result of searching process.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.PatternAnalyzeBuffer">
            <summary>
            Get result of analyzing pattern process. <seealso cref="T:LogViewer.Model.AnalyzedPatternResultItem`1">AnalyzedPatternResultItem</seealso>
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.CountKeywordBuffer">
            <summary>
            Get result of analyzing keyword count process. <seealso cref="!:AnalyzedCountKeywordItem&lt;T&gt;">AnalyzedCountKeywordItem</seealso>
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.BookmarkBuffer">
            <summary>
            Get list of log records, that were mark as bookmark.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.Comments">
            <summary>
            Get dictionary of comments, where keys are log records and values is comments.
            </summary>
        </member>
        <member name="P:LogViewer.Business.BaseLogsAnalyser`1.AnalyzePatternWorker">
            <summary>
            Get or set<see cref="T:System.ComponentModel.BackgroundWorker">BackgroundWorker</see> for canceling waste time process.
            </summary>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.#ctor">
            <summary>
            Construct tor for CXDILogsAnalyser
            </summary>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.GetFilterItemProxy(LogViewer.Business.KeywordCountItemSetting)">
            <summary>
            Get <see cref="T:LogViewer.Model.FilterItemProxy"/> from <see cref="T:LogViewer.Business.KeywordCountItemSetting"/>
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.LoadLogFile(System.String,System.Boolean)">
            <summary>
            Load all log record from log file.
            </summary>
            <param name="filePath">The log record's file path</param>
            <param name="isAdd">The variable used to check either old log record buffer
            was replaced or merged with new one</param>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.WriteMemo(System.String)">
            <summary>
            Writes memo log to file.
            </summary>
            <param name="filePath">The output file's path</param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.LoadMemoLogFile(System.String)">
            <summary>
            Load all log memo from memo log file.
            </summary>
            <param name="filePath">The memo log's file path</param>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.GetColumnContentValue(LogViewer.Model.CXDILogRecord)">
            <summary>
            Get value of Message column
            </summary>
            <param name="record"></param>
            <returns>Value of Message column</returns>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.AnalyGraphParam(System.Collections.Generic.IList{LogViewer.Business.GraphParamSetting},LogViewer.Business.GraphResult@,LogViewer.Business.GraphResult@,System.Collections.Generic.IList{LogViewer.Business.GraphResult}@)">
            <summary>
            Extract data from log records. AllLogRecordsBuffer must be set before.
            </summary>
            <param name="paramList">List of parameter will be analyze</param>
            <param name="graphLineData1">There are at most two result of value parameters. This is the first result after analyze</param>
            <param name="graphLineData2">There are at most two result of value parameters. This is the second result after analyze</param>
            <param name="eventResults">The result of event parameter after analyze </param>
        </member>
        <member name="M:LogViewer.Business.CXDILogsAnalyser.GetColumnValue(LogViewer.Model.CXDILogRecord,System.String)">
            <summary>
            Get value of a column specified by log item parameter.
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CXDILogRecord"/></param>
            <param name="logItem">Name of log column</param>
            <returns>Value of the column</returns>
        </member>
        <member name="P:LogViewer.Business.CXDILogsAnalyser.Firmware">
            <summary>
            Get or set Firmware object. After run <see cref="M:LogViewer.Business.CXDILogsAnalyser.LoadLogFile(System.String,System.Boolean)">LoadLogFile</see>, this properties return CXDIFirmware object
            </summary>
        </member>
        <member name="T:LogViewer.Model.CXDILogRecord">
            <summary>
            Model class for storing information of CXDI log record
            </summary>
        </member>
        <member name="P:LogViewer.Model.CXDILogRecord.Module">
            <summary>
            Get or set module
            </summary>
        </member>
        <member name="P:LogViewer.Model.CXDILogRecord.Message">
            <summary>
            Get or set message
            </summary>
        </member>
        <member name="T:LogViewer.Business.CCSLogsAnalyser">
            <summary>
            Class provides methods for analyzing CCS log data 
            </summary>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.AnalyzeErrorAction(System.Collections.Generic.List{LogViewer.Model.ErrorActionItem})">
            <summary>
            Used to analyze error action. AllLogRecordsBuffer must be set before do analyze action
            </summary>
            <param name="errorActionSettingList">List of error action item. This was loaded from CSV file</param>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.AnalyzeUserAction(System.Collections.Generic.List{LogViewer.Model.UserActionItem})">
            <summary>
            Used to analyze user action. AllLogRecordsBuffer must be set before do analyze action
            </summary>
            <param name="userActionSettingList">List of user action item. This was loaded from CSV file</param>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.LoadLogFile(System.String,System.Boolean)">
            <summary>
            Load log file to AllLogrecordsBuffer. Method auto detect what type of file (CCS log or CCS memo log)
            </summary>
            <param name="filePath">Location of log file</param>
            <param name="isAdd">True: added new to AllLogrecordsBuffer; False: replace to the new one</param>
            <exception cref="T:System.Exception">Throw Exception when the log file not matched with CCS log or CCS memo log</exception>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.WriteMemo(System.String)">
            <summary>
            Use to export log file to memo log file
            </summary>
            <param name="filePath">Location of exporting file</param>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.LoadMemoLogFile(System.String)">
            <summary>
            Load all log memo from memo log file.
            </summary>
            <param name="filePath">Location of exporting file</param>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.GetColumnContentValue(LogViewer.Model.CCSLogRecord)">
            <summary>
            Get value of Content column
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see></param>
            <returns>Value of Content column</returns>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.GetFilterItemProxy(LogViewer.Business.KeywordCountItemSetting)">
            <summary>
            Create <see cref="T:LogViewer.Model.FilterItemProxy"/> base on <see cref="T:LogViewer.Business.KeywordCountItemSetting">KeywordCountItemSetting</see>
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:LogViewer.Business.CCSLogsAnalyser.GetColumnValue(LogViewer.Model.CCSLogRecord,System.String)">
            <summary>
            Get value of a column specified by log item parameter.
            </summary>
            <param name="record"><see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see></param>
            <param name="logItem">Name of log column</param>
            <returns>Value of the column</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:LogViewer.Business.CCSLogsAnalyser.ErrorActionWorker" -->
        <member name="P:LogViewer.Business.CCSLogsAnalyser.AnalyzedUserActionBuffer">
            <summary>
            Get <see cref="P:LogViewer.Business.CCSLogsAnalyser.AnalyzeUserActionWorker">AnalyzeUserActionWorker</see>
            </summary>
        </member>
        <member name="P:LogViewer.Business.CCSLogsAnalyser.AnalyzedErrorActionBuffer">
            <summary>
            Get <see cref="T:LogViewer.Model.AnalyzedErrorActionItem">AnalyzedErrorActionItem</see>
            </summary>
        </member>
        <member name="T:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialog">
            <summary>
            Class wrapping Microsoft.Win32.SaveFileDialog, making it accept a ViewModel.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:LogViewer.Service.FrameworkDialogs.SaveFile.SaveFileDialog.Dispose(System.Boolean)">
            <summary>
            Dispose object
            </summary>
            <param name="disposing">True:dispose and set null the holder object;False: dispose and not set null</param>
        </member>
        <member name="T:LogViewer.MVVMHelper.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:LogViewer.MVVMHelper.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.WeakEventListener`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
            /// <param name="source">Source subscribing to the event.</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.WeakEventListener`3.OnEvent(System.Object,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:LogViewer.MVVMHelper.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.MouseWheelGesture">
            <summary>
            Class catch event of mouse.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.MouseWheelGesture.#ctor">
            <summary>
            Initializes the <see cref="T:MouseWheelGesture"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.MouseWheelGesture.#ctor(System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes the <see cref="T:MouseWheelGesture"/> class.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.MouseWheelGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
            <summary>
            Matches mouse event wheel
            </summary>
            <param name="targetElement"></param>
            <param name="inputEventArgs"></param>
            <returns>bool</returns>
        </member>
        <member name="P:LogViewer.MVVMHelper.MouseWheelGesture.Direction">
            <summary>
            Get and set direction
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.MouseWheelGesture.CtrlDown">
            <summary>
            Get Ctrl Down
            </summary>
        </member>
        <member name="P:LogViewer.MVVMHelper.MouseWheelGesture.CtrlUp">
            <summary>
            Get Ctrl Up
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.MouseWheelGesture.WheelDirection">
            <summary>
            Register enum for event wheel of mouse
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.DatagridHelper">
            <summary>
            Class DatagridHelper handle events double click, click, go to line, refresh... in data grid.
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DatagridHelper.RefreshDataProperty">
            <summary>
            Dependency property for the <see cref="P:RefreshData"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetRefreshData(System.Windows.DependencyObject)">
            <summary>
            Get property RefreshData
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.SetRefreshData(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property RefreshData
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.OnRefreshDataChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On RefreshData Changed
            <param name="o">Dependency Object</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DatagridHelper.RecordToShowProperty">
            <summary>
            Dependency property for the <see cref="P:RecordToShow"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetRecordToShow(System.Windows.DependencyObject)">
            <summary>
            Get property RecordToShow
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.SetRecordToShow(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property RecordToShow
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.OnRecordToShowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On RecordToShow Changed
            <param name="o">Dependency Object</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetCell(Microsoft.Windows.Controls.DataGrid,Microsoft.Windows.Controls.DataGridRow,System.Int32)">
            <summary>
            Get cell in row of data grid
            <param name="dataGrid">DataGrid</param>
            <param name="rowContainer">DataGridRow</param>
            <param name="column">Index of column in data grid</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Find Visual Child of Dependency Object
            <param name="obj">DependencyObject</param>
            <returns>Return a child element</returns>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DatagridHelper.DoubleClickedRowProperty">
            <summary>
            Dependency property for the <see cref="P:DoubleClickedRow"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetDoubleClickedRow(System.Windows.DependencyObject)">
            <summary>
            Get property DoubleClickedRow
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.SetDoubleClickedRow(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property DoubleClickedRow
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DatagridHelper.ClickedRowProperty">
            <summary>
            Dependency property for the <see cref="P:ClickedRow"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetClickedRow(System.Windows.DependencyObject)">
            <summary>
            Get property ClickedRow
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.SetClickedRow(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property ClickedRow
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="F:LogViewer.MVVMHelper.DatagridHelper.RecordToFollowProperty">
            <summary>
            Dependency property for the <see cref="P:RecordToFollow"/> property.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.GetRecordToFollow(System.Windows.DependencyObject)">
            <summary>
            Get property RecordToFollow
            <param name="o">Dependency Object</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.SetRecordToFollow(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set property RecordToFollow
            <param name="o">Dependency Object</param>
            <param name="value">Value to set</param>
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.DatagridHelper.OnRecordToFollowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On RecordToFollow Changed
            <param name="o">Dependency Object</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.BoolInverterConverter">
            <summary>
            Class convert a object to boolean.
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.BoolInverterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.BoolInverterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>Not implement method</returns>
        </member>
        <member name="T:LogViewer.Business.FileParser.CXDIMemoParser">
            <summary>
            Class provides methods for extracting log or writing memo CXDI log file.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.Business.FileParser.CXDIMemoParser.ParserFromFile(System.String)" -->
        <member name="M:LogViewer.Business.FileParser.CXDIMemoParser.WriteMemoLogFile(System.String)">
            <summary>
            Export log records, comments and bookmarks to memo long in an XML file.
            </summary>
            <param name="filePath">location of an XML file</param>
        </member>
        <member name="P:LogViewer.Business.FileParser.CXDIMemoParser.FirmWare">
            <summary>
            Store information of 
            </summary>
        </member>
        <member name="T:LogViewer.View.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:LogViewer.View.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.PatternManagerView">
            <summary>
            Interaction logic for RegisterPattern.xaml
            </summary>
            <summary>
            PatternManagerView
            </summary>
        </member>
        <member name="M:LogViewer.View.PatternManagerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.MoveToTime">
            <summary>
            Interaction logic for MoveToTime.xaml
            </summary>
            <summary>
            MoveToTime
            </summary>
        </member>
        <member name="M:LogViewer.View.MoveToTime.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.View.FilterButtonArea">
            <summary>
            Interaction logic for FilterButtonArea.xaml
            </summary>
            <summary>
            FilterButtonArea
            </summary>
        </member>
        <member name="M:LogViewer.View.FilterButtonArea.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LogViewer.Business.PatternItemSetting">
            <summary>
            Class store information of pattern setting
            </summary>
        </member>
        <member name="M:LogViewer.Business.PatternItemSetting.Copy">
            <summary>
            Clone object
            </summary>
            <returns><see cref="T:LogViewer.Business.PatternItemSetting"/></returns>
        </member>
        <member name="P:LogViewer.Business.PatternItemSetting.Time">
            <summary>
            Get or set Time for pattern. 
            </summary>
        </member>
        <member name="P:LogViewer.Business.PatternItemSetting.TimeUnit">
            <summary>
            Get or set unit of time: "H" or "h" for hour; "M" or "m" for minute; "S" or "s" for second
            </summary>
        </member>
        <member name="P:LogViewer.Business.PatternItemSetting.RootKey">
            <summary>
            Get or set a string for root key
            </summary>
        </member>
        <member name="P:LogViewer.Business.PatternItemSetting.Keys">
            <summary>
            Get or set keys string
            </summary>
        </member>
        <member name="P:LogViewer.Business.PatternItemSetting.Item(System.String)">
            <summary>
            Reference to properties as index of array. Use for checking a properties is valid or not.
            </summary>
            <param name="propertyName">Properties name</param>
            <returns>Empty string when a properties is valid data.</returns>
        </member>
        <member name="T:LogViewer.ViewModel.EventDataGridViewModel">
            <summary>
            Class provides methods for creating new item for graph parameter setting
            </summary>
        </member>
        <member name="M:LogViewer.ViewModel.EventDataGridViewModel.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="ownerVM">The owner view model, for examples: <see cref="T:LogViewer.ViewModel.EditGraphParamSettingViewModel"/></param>
        </member>
        <member name="M:LogViewer.ViewModel.EventDataGridViewModel.CreateNewItem">
            <summary>
            Create new parameter item
            </summary>
            <returns><see cref="T:LogViewer.Business.GraphParamSetting"/></returns>
        </member>
        <member name="T:LogViewer.ViewModel.EditCXDIFilterSettingViewModel">
            <summary>
            Class provides methods for setting filter parameter item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LogViewer.ViewModel.EditCXDIFilterSettingViewModel.#ctor(System.Action{System.Collections.Generic.List{LogViewer.Business.FilterItemSetting}})" -->
        <member name="M:LogViewer.ViewModel.EditCXDIFilterSettingViewModel.GetDefaultLogItem">
            <summary>
            Get default log item
            </summary>
            <returns></returns>
        </member>
        <member name="P:LogViewer.ViewModel.EditCXDIFilterSettingViewModel.AllLogItems">
            <summary>
            Get all log items
            </summary>
        </member>
        <member name="T:LogViewer.MVVMHelper.RowToIndexConverter">
            <summary>
            Class return next index of row in data grid
            </summary>
        </member>
        <member name="M:LogViewer.MVVMHelper.RowToIndexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Get next index of new row
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>row index if row not null, -1 if row is null</returns>
        </member>
        <member name="M:LogViewer.MVVMHelper.RowToIndexConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Initialize RowToIndexConverter if converter null
            </summary>
            <param name="serviceProvider">IServiceProvider</param>
            <returns>RowToIndexConverter</returns>
        </member>
        <member name="T:LogViewer.Model.MemoLog`1">
            <summary>
            Model class for storing information of memo log extracted from data log file
            </summary>
            <typeparam name="T">Generic class, can be: <see cref="T:LogViewer.Model.CCSLogRecord"/> or <see cref="T:LogViewer.Model.CXDILogRecord"/></typeparam>
        </member>
        <member name="M:LogViewer.Model.MemoLog`1.#ctor">
            <summary>
            Default constructor initialize for <see cref="!:Bookmaks"/>, <see cref="P:LogViewer.Model.MemoLog`1.Comments"/> and <see cref="P:LogViewer.Model.MemoLog`1.Records"/>
            </summary>
        </member>
        <member name="P:LogViewer.Model.MemoLog`1.Bookmarks">
            <summary>
            Get or set list of bookmark
            </summary>
        </member>
        <member name="P:LogViewer.Model.MemoLog`1.Comments">
            <summary>
            Get or set dictionary of comments
            </summary>
        </member>
        <member name="P:LogViewer.Model.MemoLog`1.Records">
            <summary>
            Get or set list of log records
            </summary>
        </member>
        <member name="T:LogViewer.Business.AnalyzePatternManager">
            <summary>
            Class provides methods for analyzing pattern.
            </summary>
        </member>
        <member name="M:LogViewer.Business.AnalyzePatternManager.GetPatternAnalyzeInstance``1">
            <summary>
            Get instance  of pattern analyzer class. Currently, there a one pattern analyze class: <see cref="!:AnalyzePattern"/>
            </summary>
            <typeparam name="T">Generic log record class, that can be <see cref="T:LogViewer.Model.CCSLogRecord">CCSLogRecord</see> or <see cref="T:LogViewer.Model.CXDILogRecord">CXDILogRecord</see>
            </typeparam>
            <returns>Instance of pattern analyzer class. <seealso cref="!:AnalyzePattern"/></returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
